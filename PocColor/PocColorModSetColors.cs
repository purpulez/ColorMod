using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using TaleWorlds.Core;
using TaleWorlds.Core.ViewModelCollection;
using HarmonyLib;

using TaleWorlds.Localization;
using TaleWorlds.MountAndBlade;
using TaleWorlds.MountAndBlade.View;
using TaleWorlds.MountAndBlade.ViewModelCollection.Scoreboard;

using TaleWorlds.CampaignSystem;
using TaleWorlds.CampaignSystem.ViewModelCollection;
using TaleWorlds.CampaignSystem.ViewModelCollection.ClanManagement;

using SandBox.View.Map;
using TaleWorlds.ObjectSystem;
using System.Threading;
using SandBox.GauntletUI.BannerEditor;

using SandBox.ViewModelCollection.Nameplate;

using PocColor.Config;
using NUnit.Framework;

using TaleWorlds.CampaignSystem.ViewModelCollection.Party;
using TaleWorlds.CampaignSystem.ViewModelCollection.Inventory;
using TaleWorlds.MountAndBlade.View.Tableaus;
using System.Text.RegularExpressions;
using System.Timers;
using TaleWorlds.CampaignSystem.ViewModelCollection.CharacterDeveloper;
using TaleWorlds.Engine;
using TaleWorlds.DotNet;
using TaleWorlds.Library;
using SandBox.BoardGames;
using TaleWorlds.CampaignSystem.ViewModelCollection.Party.PartyTroopManagerPopUp;
using TaleWorlds.CampaignSystem.ViewModelCollection.ClanManagement.Categories;
using TaleWorlds.MountAndBlade.View.Scripts;
using System.Security.Cryptography;
using System.Runtime.CompilerServices;
using TaleWorlds.MountAndBlade.GauntletUI.Widgets;
using TaleWorlds.MountAndBlade.GauntletUI.TextureProviders;
using Newtonsoft.Json.Linq;
using TaleWorlds.CampaignSystem.CampaignBehaviors;
using TaleWorlds.CampaignSystem.Party;
using SandBox.ViewModelCollection.SaveLoad;
using TaleWorlds.CampaignSystem.ViewModelCollection.ArmyManagement;
using TaleWorlds.CampaignSystem.ViewModelCollection.KingdomManagement.Decisions.ItemTypes;
using TaleWorlds.CampaignSystem.ViewModelCollection.GameMenu.Overlay;
using TaleWorlds.MountAndBlade.ViewModelCollection.OrderOfBattle;
using TaleWorlds.MountAndBlade.ViewModelCollection.Order;
using TaleWorlds.CampaignSystem.ViewModelCollection.Conversation;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.ViewModelCollection.KingdomManagement.Armies;
using TaleWorlds.CampaignSystem.Conversation.Tags;
using Helpers;
using static TaleWorlds.CampaignSystem.CharacterDevelopment.DefaultPerks;
using TaleWorlds.CampaignSystem.ViewModelCollection.GameMenu.TroopSelection;
using TaleWorlds.CampaignSystem.Roster;
using SandBox.GauntletUI.AutoGenerated;
using SandBox.CampaignBehaviors;
using TaleWorlds.CampaignSystem.SceneInformationPopupTypes;
using TaleWorlds.MountAndBlade.GauntletUI.SceneNotification;

namespace PocColor
{
	class PocColorModSetColors
	{

		/*
		 * 
		 * color mode:
		 *  
		 *  - 0: default
		 *  - 1: randomized. If no array is specified: randomize all colors. If color arrays are specified, colors are picked from this arrays (if only one array, each color is picked in this array; If two color arrays: each color is picked in its own palette array).
		 *  - 11: randomized but same index in color array is used for both color1 and color2:   if color = [ A,B ,C ]  and color2 = [ D, E, F ]   => it allows to set colors by pair:  A/D , B/E, C/F ... (the max index possible is the min length of the two arrays). If only one array, or no array: a unique color is used.
		 *  - 2: banner linked
		 *  - 3: overriden with custom values
		 *  - other value: default
		 * 
		 */
		public const int DEFAULT_MODE = 0;
		public const int RANDOMIZED = 1;
		public const int RANDOMIZED_LINKED = 11;
		public const int SHIELD_LINKED = 2;
		public const int SHIELD_LINKED_RANDOM = 21;
		public const int SHIELD_LINKED_RANDOM_FULL = 22;
		public const int BANNER_LINKED = 4;
		public const int BANNER_LINKED_RANDOM = 41;
		public const int BANNER_LINKED_RANDOM_FULL = 42;

		public const int OVERRIDE = 3;

		public const int COLOR_COUNT = 158;

		public static Random rnd = new Random();

		//A map to store the units names allows resolving them from anywhere
		//public static Map<string, CharInfo > unitNames = new Map<string, CharInfo>();
		public static Map<string, Integer> extraColorMap = new Map<string, Integer>();

        public static Map<string, ColorData> colorDataCache = new Map<string, ColorData>();
        
		public static ColorData savedColorData;

        public static string DUMMY_BANNER1 = "30.82.88.3734.3734.768.768.1.0.0.522.40.40.924.924.762.775.0.0.0";
        public static string DUMMY_BANNER2 = "30.116.83.3734.3734.768.768.1.0.0.514.40.40.924.924.762.775.0.0.0";
        public static string DUMMY_BANNER3 = "4.82.88.1638.1638.768.768.1.0.0.517.116.40.924.924.762.775.0.0.0";

        public static uint parseColor(string colorStr)
		{

			if (colorStr.StartsWith("#"))
			{
				string hex = "FF" + colorStr.Substring(1, 6);
				return Convert.ToUInt32(hex, 16);
			}
			else
			{
				try
				{
					int i = int.Parse(colorStr);
					return BannerManager.GetColor(i);
				}
				catch (Exception e)
				{
					return BannerManager.GetColor(40);
				}
			}
		}

		public static uint getRandomColor()
		{
			int r = rnd.Next(0, COLOR_COUNT);
			return BannerManager.GetColor(r);
		}

		public static uint getRandomColorFromColors(string[] colors)
		{
			int r = rnd.Next(0, colors.Count());
			return parseColor((colors[r]));
		}


		public static string getRandomBannerFromBanners(string[] banners)
		{
			int r = rnd.Next(0, banners.Count());
			return banners[r];
		}

		public static(uint?, uint?) getRandomPairColorsFromColors(string[] colors, string[] colors2)
		{
			int min = Math.Min(colors.Count(), colors2.Count());
			int r = rnd.Next(0, min);
			return (parseColor(colors[r]), parseColor(colors2[r]));
		}

		static private (int, uint?, uint?, string, string) getColorFromConfig(string clan, ref Banner banner, string unitName, bool isHero, bool isMounted, bool isRanged, int tier, string culture)
		{
			string bannerStr = banner is object ? PocColorMod.SerializeBanner(banner) : null;
			return getColorFromConfig(clan, ref banner, ref bannerStr, unitName, isHero, isMounted, isRanged, tier, culture);
		}
		static private (int, uint?, uint?, string, string) getColorFromConfig(string clan, ref string bannerStr, string unitName, bool isHero, bool isMounted, bool isRanged, int tier, string culture)
		{
			Banner banner = bannerStr is object ? new Banner(bannerStr) : null;
			return getColorFromConfig(clan, ref banner, ref bannerStr, unitName, isHero, isMounted, isRanged, tier, culture);
		}

		static private (int, uint?, uint?, string, string) getBattleColorFromConfig(string clan, ref Banner banner, string unitName, bool isHero, bool isMounted, bool isRanged, int tier, string culture)
		{
			string bannerStr = banner is object ? PocColorMod.SerializeBanner(banner) : null;
			return getBattleColorFromConfig(clan, ref banner, ref bannerStr, unitName, isHero, isMounted, isRanged, tier, culture);
		}
		static private (int, uint?, uint?, string, string) getBattleColorFromConfig(string clan, ref string bannerStr, string unitName, bool isHero, bool isMounted, bool isRanged, int tier, string culture)
		{
			Banner banner = bannerStr is object ? new Banner(bannerStr) : null;
			return getBattleColorFromConfig(clan, ref banner, ref bannerStr, unitName, isHero, isMounted, isRanged, tier, culture);
		}
		static private (string, string) getBannerFromConfig(string clan, string bannerStr, string unitName, bool isHero, bool isMounted, bool isRanged, int tier, string culture)
		{
			string newBanner = null;
			string newShield = null;

			try
			{
				//Log.write("Finding: " + unitName + ", " + bannerStr);

				bool isPlayer = (unitName == Hero.MainHero.Name.ToString());
				string kingdom = "";
				
				Clan myclan = null;
                Kingdom myKingdom = null;

                if (clan is null)
				{
					//If clan is undefined i try to get it from cache
					clan = PocColorMod.bannerClanCache[bannerStr] ?? "";
				}
				
				if (clan is null)
				{
					//If clan in not in cache, try to get Kingdom from cache
                    kingdom = PocColorMod.bannerKingdomCache[bannerStr] ?? "";
                }
				else
				{
                    //Get Clan and Kingdom from Clan
                    bool isClan(Clan c) { return c.Name.ToString() == clan; }
                    myclan = Clan.FindFirst(isClan);
                    if (myclan is object)
                    {
                        kingdom = myclan.Kingdom?.Name.ToString();
                    }
                }

				//Now get kingdom
                for (int i = 0; i < Campaign.Current.Kingdoms.Count; i++)
                {
                    myKingdom = Campaign.Current.Kingdoms[i].Name.ToString() == kingdom ? Campaign.Current.Kingdoms[i] : null;
                    if (myKingdom is object) break;
                }

                bool isKing = false;
				bool isLeader = false;

				if ( unitName is object) isKing = (myKingdom?.Leader?.Name?.ToString() == unitName);
				if (unitName is object) isLeader = (myclan?.Leader?.Name.ToString() == unitName);

				string playerClanName = Clan.PlayerClan?.Name?.ToString();
				string playerKingdomName = Clan.PlayerClan?.Kingdom?.Name?.ToString();

				if (isPlayer && clan != playerClanName && !string.IsNullOrEmpty(playerClanName) && !string.IsNullOrEmpty(clan))
				{
					//Wait a minute! this should be playerClan: how come it has not been found? Ok! the banner or clan name has changed: lets update them
					//Log.write("> player banner or clan name has changed, updating cache...");

					string cl;
					string kd;

					//Try to remove any existing entry
					PocColorMod.bannerClanCache.TryRemove(bannerStr, out cl);
					PocColorMod.bannerKingdomCache.TryRemove(bannerStr, out kd);
					//Add the new entries 

					PocColorMod.bannerClanCache.TryAdd(bannerStr, playerClanName);
					clan = playerClanName;
					if (playerKingdomName is object)
					{
						PocColorMod.bannerKingdomCache.TryAdd(bannerStr, playerKingdomName);
						kingdom = playerKingdomName;
					}

				}

				bool isPlayerClan = (!string.IsNullOrEmpty(playerClanName) && clan == playerClanName) || (isPlayer && !string.IsNullOrEmpty(clan));
				bool isPlayerKingdom = !string.IsNullOrEmpty(playerKingdomName) && kingdom == playerKingdomName && Clan.PlayerClan.IsKingdomFaction;

                if (PocColorMod.doLog) Log.write("==> character is: [" + unitName + "] of clan [" + clan + "] of kingdom [" + kingdom + "] isPlayerKingdom [" + isPlayerKingdom + "] isPlayerClan [" + isPlayerClan + "] isPlayer [" + isPlayer + "] isKing [" + isKing + "] isLeader [" + isLeader + "] isHero [" + isHero + "] isMounted [" + isMounted + "] isRanged [" + isRanged + "] tier [" + tier + "] culture [" + culture + "]");
                (int mode, string[] colors, string[] colors2, string[] banners, string[] shields ) = PocColorMod.config.GetConfig(kingdom, clan, unitName, isPlayerKingdom, isPlayerClan, isPlayer, isKing, isLeader, isHero, isMounted, isRanged, tier, culture);
				
				string colorsstr = colors is object ? string.Join(",", colors) : "";
				string colors2str = colors2 is object ? string.Join(",", colors2) : "";
				string shieldsStr = shields is object ? string.Join(",", shields) : "";
				string bannersStr = banners is object ? string.Join(",", banners) : "";

				if (PocColorMod.doLog) Log.write("> Applying colors according to: mode[" + mode + "] colors[" + colorsstr + "] colors2[" + colors2str + "] newBanner[" + bannersStr + "] shields[" + shieldsStr + "]");

				if (banners is object && banners.Length > 0)
				{
					newBanner = getRandomBannerFromBanners(banners);

					//Log.write("==> new Banner to apply : " + newBanner);

					PocColorMod.bannerClanCache.TryAdd(newBanner, clan);
					PocColorMod.bannerKingdomCache.TryAdd(newBanner, kingdom);
				}
				if (shields is object && shields.Length > 0)
				{
					newShield = getRandomBannerFromBanners(shields);

					//Log.write("==> new Shield to apply : " + newShield);

					PocColorMod.bannerClanCache.TryAdd(newShield, clan);
					PocColorMod.bannerKingdomCache.TryAdd(newShield, kingdom);
				}
			}
			catch (Exception e)
			{
				Log.write(e.Message);
			}
			return (newBanner, newShield);
		}

		static private void updateCache(string bannerStr, string unitName)
		{

			try
			{
				//Log.write("Updating cache: " + unitName + ", " + bannerStr);

				bool isPlayer = (unitName == Hero.MainHero.Name.ToString());

				string clan = PocColorMod.bannerClanCache[bannerStr] ?? "";
				string playerClanName = Clan.PlayerClan?.Name?.ToString();
				string playerKingdomName = Clan.PlayerClan?.Kingdom?.Name?.ToString();

				if (isPlayer && clan != playerClanName && playerClanName is object)
				{
					//Wait a minute! this should be playerClan: how come it has not been found? Ok! the banner or clan name has changed: lets update them
					//Log.write("> player banner or clan name has changed, updating cache...");

					string cl;
					string kd;

					//Try to remove any existing entry
					PocColorMod.bannerClanCache.TryRemove(bannerStr, out cl);
					PocColorMod.bannerKingdomCache.TryRemove(bannerStr, out kd);
					//Add the new entries 

					PocColorMod.bannerClanCache.TryAdd(bannerStr, playerClanName);
					clan = playerClanName;
					if (playerKingdomName is object)
					{
						PocColorMod.bannerKingdomCache.TryAdd(bannerStr, playerKingdomName);
					}
				}
			}
			catch (Exception e)
			{
				Log.write(e.Message);
			}
		}


		static private string getIconFromConfig(string clan, ref string bannerStr, string unitName, bool isHero, bool isMounted, bool isRanged, int tier, string culture)
		{
			string shield;
			string a, b, c;
			bool success, successBG;

			bool isPlayer = (unitName == Hero.MainHero.Name.ToString());

			string kingdom = "";

            if (clan is null)
            {
                //If clan is undefined i try to get it from cache
                clan = PocColorMod.bannerClanCache[bannerStr] ?? "";
            }
            if (clan is null)
            {
                //If clan in not in cache, try to get Kingdom from cache
                kingdom = PocColorMod.bannerKingdomCache[bannerStr] ?? "";
            }
            else
            {
                //Get Clan and Kingdom from Clan
                bool isClan(Clan cl) { return cl.Name.ToString() == clan; }
                Clan myclan = Clan.FindFirst(isClan);
                if (myclan is object)
                {
                    kingdom = myclan.Kingdom?.Name.ToString() ?? "";
                }
            }

            string playerClanName = Clan.PlayerClan?.Name?.ToString();
			string playerKingdomName = Clan.PlayerClan?.Kingdom?.Name?.ToString();

			bool isPlayerKingdom = !string.IsNullOrEmpty(playerKingdomName) && kingdom == playerKingdomName && Clan.PlayerClan.IsKingdomFaction;
			bool isPlayerClan = (!string.IsNullOrEmpty(playerClanName) && clan == playerClanName) || (isPlayer && !string.IsNullOrEmpty(clan));

			(success, successBG, a, shield, b, c) = PocColorMod.config.GetClanConfig(kingdom, clan, isPlayerKingdom, isPlayerClan);
			if (shield is object) return shield;

			(a, shield, b, c) = PocColorMod.config.GetKingdomConfig(kingdom, isPlayerKingdom);
			if (shield is object) return shield;

			(int mode, uint? c1, uint? c2, string newBanner, string newShield) = getColorFromConfig(clan, ref bannerStr, unitName, isHero, isMounted, isRanged, tier, culture);
			if (newShield is object) return newShield;

			return bannerStr;
		}

		static private (int, uint?, uint?, string, string) getColorFromConfig(string clan, ref Banner banner, ref string bannerStr, string unitName, bool isHero, bool isMounted, bool isRanged, int tier, string culture)
		{

			uint? color1 = null;
			uint? color2 = null;
			string newBanner = null;
			string newShield = null;
			int mode = 2;
			try
			{
				bool isPlayer = (unitName == Hero.MainHero.Name.ToString());

                string kingdom = "";

                Clan myclan = null;
                Kingdom myKingdom = null;

                if (clan is null)
                {
                    //If clan is undefined i try to get it from cache
                    clan = PocColorMod.bannerClanCache[bannerStr] ?? "";
                }

                if (clan is null)
                {
                    //If clan in not in cache, try to get Kingdom from cache
                    kingdom = PocColorMod.bannerKingdomCache[bannerStr] ?? "";
                }
                else
                {
                    //Get Clan and Kingdom from Clan
                    bool isClan(Clan c) { return c.Name.ToString() == clan; }
                    myclan = Clan.FindFirst(isClan);
                    if (myclan is object)
                    {
                        kingdom = myclan.Kingdom?.Name.ToString();
                    }
                }

                //Now get kingdom
                for (int i = 0; i < Campaign.Current.Kingdoms.Count; i++)
                {
                    myKingdom = Campaign.Current.Kingdoms[i].Name.ToString() == kingdom ? Campaign.Current.Kingdoms[i] : null;
                    if (myKingdom is object) break;
                }

                bool isKing = false;
				bool isLeader = false;

				if (unitName is object) isKing = (myKingdom?.Leader?.Name?.ToString() == unitName);
				if (unitName is object) isLeader = (myclan?.Leader?.Name.ToString() == unitName);

				string playerClanName = Clan.PlayerClan?.Name?.ToString();
				string playerKingdomName = Clan.PlayerClan?.Kingdom?.Name?.ToString();


				if (isPlayer && clan != playerClanName && !string.IsNullOrEmpty(playerClanName) && !string.IsNullOrEmpty(clan))
				{
					//Wait a minute! this should be playerClan: how come it has not been found? Ok! the banner or clan name has changed: lets update them
					//Log.write("> player banner or clan name has changed, updating cache...");

					string cl;
					string kd;

					//Try to remove any existing entry
					PocColorMod.bannerClanCache.TryRemove(bannerStr, out cl);
					PocColorMod.bannerKingdomCache.TryRemove(bannerStr, out kd);
					//Add the new entries 

					PocColorMod.bannerClanCache.TryAdd(bannerStr, playerClanName);
					clan = playerClanName;
					if (playerKingdomName is object)
					{
						PocColorMod.bannerKingdomCache.TryAdd(bannerStr, playerKingdomName);
						kingdom = playerKingdomName;
					}

				}

				bool isPlayerClan = (!string.IsNullOrEmpty(playerClanName) && clan == playerClanName) || (isPlayer && !string.IsNullOrEmpty(clan));
				bool isPlayerKingdom = !string.IsNullOrEmpty(playerKingdomName) && kingdom == playerKingdomName && Clan.PlayerClan.IsKingdomFaction;

				if (PocColorMod.doLog) Log.write("==> character is: [" + unitName + "] of clan [" + clan + "] of kingdom [" + kingdom + "] isPlayerKingdom [" + isPlayerKingdom + "] isPlayerClan [" + isPlayerClan + "] isPlayer [" + isPlayer + "] isKing [" + isKing + "] isLeader [" + isLeader + "] isHero [" + isHero + "] isMounted [" + isMounted + "] isRanged [" + isRanged + "] tier [" + tier + "] culture [" + culture + "]");

				(int mode2, string[] colors, string[] colors2, string[] banners, string[] shields ) = PocColorMod.config.GetConfig(kingdom, clan, unitName, isPlayerKingdom, isPlayerClan, isPlayer, isKing, isLeader, isHero, isMounted, isRanged, tier, culture);
				mode = mode2;
				
				string colorsstr = colors is object ? string.Join(",", colors) : "";
				string colors2str = colors2 is object ? string.Join(",", colors2) : "";
				string shieldsStr = shields is object ? string.Join(",", shields) : "";
				string bannersStr = banners is object ? string.Join(",", banners) : "";

				if (PocColorMod.doLog) Log.write("> Applying colors according to: mode[" + mode + "] colors[" + colorsstr + "] colors2[" + colors2str + "] newBanner[" + bannersStr + "] shields[" + shieldsStr + "]");

				if (banners != null && banners.Length > 0)
				{
					//IF SHIELD NOT DEFINED, WE USED BANNER
					newBanner = getRandomBannerFromBanners(banners);
					bannerStr = newBanner;
					banner = new Banner(newBanner);

					//A new banner in cache: otherwise the kingdom and clan of the unit can not be found
					PocColorMod.bannerClanCache.TryAdd(newBanner, clan);
					PocColorMod.bannerKingdomCache.TryAdd(newBanner, kingdom);
				}

				//BANNER LINKED: banner colors are used
				if (mode == BANNER_LINKED && banner is object && banner.BannerDataList is object && banner.BannerDataList.Count > 1)
				{
					int colorId = banner.BannerDataList[0].ColorId;
					int colorId2 = banner.BannerDataList[1].ColorId;

					//Log.write("Banner Colors: " + colorId.ToString() + "[ " + BannerManager.GetColor(colorId) + "] , " + colorId2.ToString() + "[" + BannerManager.GetColor(colorId2) + "]");

					color1 = BannerManager.GetColor(colorId);
					color2 = BannerManager.GetColor(colorId2);
				} else if (mode == BANNER_LINKED_RANDOM && banner is object && banner.BannerDataList is object && banner.BannerDataList.Count > 1)
				{
					int colorId = banner.BannerDataList[0].ColorId;
					int colorId2 = banner.BannerDataList[1].ColorId;

					string[] bannerColors = new string[2] { colorId.ToString(), colorId2.ToString() };
					string[] bannerColorsAlt = new string[2] { colorId2.ToString(), colorId.ToString() };
					//Log.write("Banner Colors: " + colorId.ToString() + ", " + colorId2.ToString());

					(color1, color2) = getRandomPairColorsFromColors(bannerColors, bannerColorsAlt);

				} else if (mode == BANNER_LINKED_RANDOM_FULL && banner is object && banner.BannerDataList is object && banner.BannerDataList.Count > 0)
				{
					HashSet<string> bannerColors = new HashSet<string>();
					for (int i = 0; i < banner.BannerDataList.Count; i++)
					{
						bannerColors.Add(banner.BannerDataList[i].ColorId.ToString());
					}
					color1 = getRandomColorFromColors(bannerColors.ToArray());
					color2 = getRandomColorFromColors(bannerColors.ToArray());
				}

				if (shields is object && shields.Length > 0)
				{
					//DEFAULT IS SHIELD
					newShield = getRandomBannerFromBanners(shields);
					bannerStr = newShield;
					banner = new Banner(newShield);

					//Log.write("set new shield:" + bannerStr);

					//A new shields in cache: otherwise the kingdom and clan of the unit can not be found
					PocColorMod.bannerClanCache.TryAdd(newShield, clan);
					PocColorMod.bannerKingdomCache.TryAdd(newShield, kingdom);

					//A new banner in cache: otherwise the kingdom and clan of the unit can not be found	
				}

				//SHIELD LINKED: shield colors are used
				if (mode == SHIELD_LINKED && banner is object && banner.BannerDataList is object && banner.BannerDataList.Count > 1)
				{
					int colorId = banner.BannerDataList[0].ColorId;
					int colorId2 = banner.BannerDataList[1].ColorId;

					//Log.write("Banner Colors: " + colorId.ToString() + "[ " + BannerManager.GetColor(colorId) + "] , " + colorId2.ToString() + "[" + BannerManager.GetColor(colorId2) + "]");

					color1 = BannerManager.GetColor(colorId);
					color2 = BannerManager.GetColor(colorId2);
				}
				else if (mode == RANDOMIZED)
				{
					if ((colors is null || colors.IsEmpty()) && (colors2 is null || colors2.IsEmpty()))
					{
						color1 = getRandomColor();
						color2 = getRandomColor();
					}
					else
					{
						if (colors is null)
						{
							colors = colors2;
						}
						if (colors2 is null)
						{
							colors2 = colors;
						}

						color1 = getRandomColorFromColors(colors);
						colors2 = colors2 is null ? colors : colors2;
						color2 = getRandomColorFromColors(colors2);
					}
				}
				else if (mode == RANDOMIZED_LINKED)
				{
					if ((colors is null || colors.IsEmpty()) && (colors2 is null || colors2.IsEmpty()))
					{
						color1 = getRandomColor();
						color2 = color1;
					}
					else
					{
						if (colors is null)
						{
							colors = colors2;
						}
						if (colors2 is null)
						{
							colors2 = colors;
						}
						(color1, color2) = getRandomPairColorsFromColors(colors, colors2);
					}

				}
				else if (mode == OVERRIDE)
				{
					color1 = parseColor(colors[0]);
					color2 = parseColor(colors[1]);
				}
				else if (mode == SHIELD_LINKED_RANDOM && banner is object && banner.BannerDataList is object && banner.BannerDataList.Count > 1)
				{
					int colorId = banner.BannerDataList[0].ColorId;
					int colorId2 = banner.BannerDataList[1].ColorId;

					string[] bannerColors = new string[2] { colorId.ToString(), colorId2.ToString() };
					string[] bannerColorsAlt = new string[2] { colorId2.ToString(), colorId.ToString() };
					//Log.write("Banner Colors: " + colorId.ToString() + ", " + colorId2.ToString());

					(color1, color2) = getRandomPairColorsFromColors(bannerColors, bannerColorsAlt);

				}
				else if (mode == SHIELD_LINKED_RANDOM_FULL && banner is object && banner.BannerDataList is object && banner.BannerDataList.Count > 0)
				{
					HashSet<string> bannerColors = new HashSet<string>();
					for (int i = 0; i < banner.BannerDataList.Count; i++)
					{
						bannerColors.Add(banner.BannerDataList[i].ColorId.ToString());
					}
					color1 = getRandomColorFromColors(bannerColors.ToArray());
					color2 = getRandomColorFromColors(bannerColors.ToArray());
				}
			}
			catch (Exception e)
			{
				Log.write(e.Message);
			}
			return (mode, color1, color2, newBanner, newShield);
		}

		static private (int, uint?, uint?, string, string) getBattleColorFromConfig(string clan, ref Banner banner, ref string bannerStr, string unitName, bool isHero, bool isMounted, bool isRanged, int tier, string culture)
		{

			uint? color1 = null;
			uint? color2 = null;
			string newBanner = null;
			string newShield = null;
			int mode = 2;
			try
			{
				bool isPlayer = (unitName == Hero.MainHero.Name.ToString());

                string kingdom = "";

                Clan myclan = null;
                Kingdom myKingdom = null;

                if (clan is null)
                {
                    //If clan is undefined i try to get it from cache
                    clan = PocColorMod.bannerClanCache[bannerStr] ?? "";
                }

                if (clan is null)
                {
                    //If clan in not in cache, try to get Kingdom from cache
                    kingdom = PocColorMod.bannerKingdomCache[bannerStr] ?? "";
                }
                else
                {
                    //Get Clan and Kingdom from Clan
                    bool isClan(Clan c) { return c.Name.ToString() == clan; }
                    myclan = Clan.FindFirst(isClan);
                    if (myclan is object)
                    {
                        kingdom = myclan.Kingdom?.Name.ToString();
                    }
                }

                //Now get kingdom
                for (int i = 0; i < Campaign.Current.Kingdoms.Count; i++)
                {
                    myKingdom = Campaign.Current.Kingdoms[i].Name.ToString() == kingdom ? Campaign.Current.Kingdoms[i] : null;
                    if (myKingdom is object) break;
                }

                bool isKing = false;
				bool isLeader = false;

				if (unitName is object) isKing = (myKingdom?.Leader?.Name?.ToString() == unitName);
				if (unitName is object) isLeader = (myclan?.Leader?.Name.ToString() == unitName);

				string playerClanName = Clan.PlayerClan?.Name?.ToString();
				string playerKingdomName = Clan.PlayerClan?.Kingdom?.Name?.ToString();


				if (isPlayer && clan != playerClanName && !string.IsNullOrEmpty(playerClanName) && !string.IsNullOrEmpty(clan))
				{
					//Wait a minute! this should be playerClan: how come it has not been found? Ok! the banner or clan name has changed: lets update them
					//Log.write("> player banner or clan name has changed, updating cache...");

					string cl;
					string kd;

					//Try to remove any existing entry
					PocColorMod.bannerClanCache.TryRemove(bannerStr, out cl);
					PocColorMod.bannerKingdomCache.TryRemove(bannerStr, out kd);
					//Add the new entries 

					PocColorMod.bannerClanCache.TryAdd(bannerStr, playerClanName);
					clan = playerClanName;
					if (playerKingdomName is object)
					{
						PocColorMod.bannerKingdomCache.TryAdd(bannerStr, playerKingdomName);
						kingdom = playerKingdomName;
					}

				}

				bool isPlayerClan = (!string.IsNullOrEmpty(playerClanName) && clan == playerClanName) || (isPlayer && !string.IsNullOrEmpty(clan));
				bool isPlayerKingdom = !string.IsNullOrEmpty(playerKingdomName) && kingdom == playerKingdomName && Clan.PlayerClan.IsKingdomFaction;

                if (PocColorMod.doLog) Log.write("==> character is: [" + unitName + "] of clan [" + clan + "] of kingdom [" + kingdom + "] isPlayerKingdom [" + isPlayerKingdom + "] isPlayerClan [" + isPlayerClan + "] isPlayer [" + isPlayer + "] isKing [" + isKing + "] isLeader [" + isLeader + "] isHero [" + isHero + "] isMounted [" + isMounted + "] isRanged [" + isRanged + "] tier [" + tier + "] culture [" + culture + "]");

                (int mode2, string[] colors, string[] colors2, string[] banners, string[] shields) = PocColorMod.config.GetBattleConfig(kingdom, clan, unitName, isPlayerKingdom, isPlayerClan, isPlayer, isKing, isLeader, isHero, isMounted, isRanged, tier, culture);
				
				mode = mode2;
				string colorsstr = colors is object ? string.Join(",", colors) : "";
				string colors2str = colors2 is object ? string.Join(",", colors2) : "";
				string shieldsStr = shields is object ? string.Join(",", shields) : "";
				string bannersStr = banners is object ? string.Join(",", banners) : "";

				if (PocColorMod.doLog) Log.write("> Applying colors according to: mode[" + mode + "] colors[" + colorsstr + "] colors2[" + colors2str + "] newBanner[" + bannersStr + "] shields[" + shieldsStr + "]");

				if (banners != null && banners.Length > 0)
				{
					//IF SHIELD NOT DEFINED, WE USED BANNER
					newBanner = getRandomBannerFromBanners(banners);
					bannerStr = newBanner;
					banner = new Banner(newBanner);

					//A new banner in cache: otherwise the kingdom and clan of the unit can not be found
					PocColorMod.bannerClanCache.TryAdd(newBanner, clan);
					PocColorMod.bannerKingdomCache.TryAdd(newBanner, kingdom);
				}

				//BANNER LINKED: banner colors are used
				if (mode == BANNER_LINKED && banner is object && banner.BannerDataList is object && banner.BannerDataList.Count > 1)
				{
					int colorId = banner.BannerDataList[0].ColorId;
					int colorId2 = banner.BannerDataList[1].ColorId;

					//Log.write("Banner Colors: " + colorId.ToString() + "[ " + BannerManager.GetColor(colorId) + "] , " + colorId2.ToString() + "[" + BannerManager.GetColor(colorId2) + "]");

					color1 = BannerManager.GetColor(colorId);
					color2 = BannerManager.GetColor(colorId2);
				}
				else if (mode == BANNER_LINKED_RANDOM && banner is object && banner.BannerDataList is object && banner.BannerDataList.Count > 1)
				{
					int colorId = banner.BannerDataList[0].ColorId;
					int colorId2 = banner.BannerDataList[1].ColorId;

					string[] bannerColors = new string[2] { colorId.ToString(), colorId2.ToString() };
					string[] bannerColorsAlt = new string[2] { colorId2.ToString(), colorId.ToString() };
					//Log.write("Banner Colors: " + colorId.ToString() + ", " + colorId2.ToString());

					(color1, color2) = getRandomPairColorsFromColors(bannerColors, bannerColorsAlt);

				}
				else if (mode == BANNER_LINKED_RANDOM_FULL && banner is object && banner.BannerDataList is object && banner.BannerDataList.Count > 0)
				{
					HashSet<string> bannerColors = new HashSet<string>();
					for (int i = 0; i < banner.BannerDataList.Count; i++)
					{
						bannerColors.Add(banner.BannerDataList[i].ColorId.ToString());
					}
					color1 = getRandomColorFromColors(bannerColors.ToArray());
					color2 = getRandomColorFromColors(bannerColors.ToArray());
				}

				if (shields is object && shields.Length > 0)
				{
					//DEFAULT IS SHIELD
					newShield = getRandomBannerFromBanners(shields);
					bannerStr = newShield;
					banner = new Banner(newShield);

					//Log.write("set new shield:" + bannerStr);

					//A new shields in cache: otherwise the kingdom and clan of the unit can not be found
					PocColorMod.bannerClanCache.TryAdd(newShield, clan);
					PocColorMod.bannerKingdomCache.TryAdd(newShield, kingdom);

					//A new banner in cache: otherwise the kingdom and clan of the unit can not be found	
				}

				//SHIELD LINKED: shield colors are used
				if (mode == SHIELD_LINKED && banner is object && banner.BannerDataList is object && banner.BannerDataList.Count > 1)
				{
					int colorId = banner.BannerDataList[0].ColorId;
					int colorId2 = banner.BannerDataList[1].ColorId;

					//Log.write("Banner Colors: " + colorId.ToString() + "[ " + BannerManager.GetColor(colorId) + "] , " + colorId2.ToString() + "[" + BannerManager.GetColor(colorId2) + "]");

					color1 = BannerManager.GetColor(colorId);
					color2 = BannerManager.GetColor(colorId2);
				}
				else if (mode == RANDOMIZED)
				{
					if ((colors is null || colors.IsEmpty()) && (colors2 is null || colors2.IsEmpty()))
					{
						color1 = getRandomColor();
						color2 = getRandomColor();
					}
					else
					{
						if (colors is null)
						{
							colors = colors2;
						}
						if (colors2 is null)
						{
							colors2 = colors;
						}

						color1 = getRandomColorFromColors(colors);
						colors2 = colors2 is null ? colors : colors2;
						color2 = getRandomColorFromColors(colors2);
					}
				}
				else if (mode == RANDOMIZED_LINKED)
				{
					if ((colors is null || colors.IsEmpty()) && (colors2 is null || colors2.IsEmpty()))
					{
						color1 = getRandomColor();
						color2 = color1;
					}
					else
					{
						if (colors is null)
						{
							colors = colors2;
						}
						if (colors2 is null)
						{
							colors2 = colors;
						}
						(color1, color2) = getRandomPairColorsFromColors(colors, colors2);
					}

				}
				else if (mode == OVERRIDE)
				{
					color1 = parseColor(colors[0]);
					color2 = parseColor(colors[1]);
				}
				else if (mode == SHIELD_LINKED_RANDOM && banner is object && banner.BannerDataList is object && banner.BannerDataList.Count > 1)
				{
					int colorId = banner.BannerDataList[0].ColorId;
					int colorId2 = banner.BannerDataList[1].ColorId;

					string[] bannerColors = new string[2] { colorId.ToString(), colorId2.ToString() };
					string[] bannerColorsAlt = new string[2] { colorId2.ToString(), colorId.ToString() };
					//Log.write("Banner Colors: " + colorId.ToString() + ", " + colorId2.ToString());

					(color1, color2) = getRandomPairColorsFromColors(bannerColors, bannerColorsAlt);

				}
				else if (mode == SHIELD_LINKED_RANDOM_FULL && banner is object && banner.BannerDataList is object && banner.BannerDataList.Count > 0)
				{
					HashSet<string> bannerColors = new HashSet<string>();
					for (int i = 0; i < banner.BannerDataList.Count; i++)
					{
						bannerColors.Add(banner.BannerDataList[i].ColorId.ToString());
					}
					color1 = getRandomColorFromColors(bannerColors.ToArray());
					color2 = getRandomColorFromColors(bannerColors.ToArray());
				}
			}
			catch (Exception e)
			{
				Log.write(e.Message);
			}
			return (mode, color1, color2, newBanner, newShield);
		}

		static public bool updateAgentBuildDataColors(ref AgentBuildData __instance, ref uint color1, ref uint color2, bool first)
		{

			//synchro color with banner if banner is set: to prevent color override
			//Si on est en mode bannière, peut-être qu'à cette étape on peut ignorer la mise à jour de la couleur (en faisant un return false: si la bannière a été settée, on assume que la couleur est correcte)

			BasicCharacterObject character = __instance.AgentCharacter;
			Banner banner = __instance.AgentBanner;

			uint? c1, c2;
			string newbanner, newshield;
			int mode = 2;
			
			try
			{
				if (character is object)
				{
					//Integer extraColor = extraColorMap[character.StringId];
					//if (extraColor is object)
					//{
					//	//Color has already been defined by previous call
					//	if (first) color1 = extraColor.value;
					//	else color2 = extraColor.value;

					//	extraColorMap.TryRemove(character.StringId, out extraColor);
					//	return true;
					//}

					if (banner is object)
					{

                        String charName = character.GetName().ToString();
                        CharacterObject chara = CharacterObject.FindFirst(c => c.Name.ToString().Equals(charName));

                        (mode, c1, c2, newbanner, newshield) = getColorFromConfig(null, ref banner, character.GetName().ToString(), character.IsHero, character.IsMounted, character.IsRanged, chara.Tier, character.Culture.Name.ToString() );
						//Log.write("character [" + character.StringId + "] colors updated");

						if (c1 is object && c2 is object)
						{
							color1 = c1.Value;
							color2 = c2.Value;
							
							if (first) extraColorMap.TryAdd(character.StringId, new Integer(color2));
							else extraColorMap.TryAdd(character.StringId, new Integer(color1));

							//UPDATE ALL COLORS AND BANNER (so they match)
							//Log.write("===> Update Agent colors and Shield: " + color1 + " " + color2);

							Traverse.Create(__instance).Field("AgentBanner").SetValue(banner);
							__instance.AgentData.ClothingColor1(color1);
							__instance.AgentData.ClothingColor2(color2);
						}
					}
					else
					{
						IAgentOriginBase origin = __instance.AgentOrigin;
						if (origin is object)
						{
							banner = origin.Banner;
							if (banner is object)
							{
                                String charName = character.GetName().ToString();
                                CharacterObject chara = CharacterObject.FindFirst(c => c.Name.ToString().Equals(charName));

                                (mode, c1, c2, newbanner, newshield) = getColorFromConfig(null, ref banner, character.GetName().ToString(), character.IsHero, character.IsMounted, character.IsRanged, 0, character.Culture.Name.ToString());
								//Log.write("character [" + character.StringId + "] colors updated");

								if (c1 is object && c2 is object)
								{
									color1 = c1.Value;
									color2 = c2.Value;

									//if (first) extraColorMap.TryAdd(character.StringId, new Integer(color2));
									//else extraColorMap.TryAdd(character.StringId, new Integer(color1));

									//UPDATE ALL COLORS AND BANNER (so they match)
									//Log.write("===> Update Agent colors and Shield: " + color1 + " " + color2 );

									Traverse.Create(__instance).Field("AgentBanner").SetValue(banner);
									__instance.AgentData.ClothingColor1(color1);
									__instance.AgentData.ClothingColor2(color2);

								}
							}
						}
					}
				}
			}
			catch (Exception e)
			{
				Log.write("Error caught:" + e.Message);
			}
			return true;
		}


		/*
		 * **********************************
		 * THIS IS 3D CHARACTER IN BATTLE
		 * **********************************
		 */
		[HarmonyPatch(typeof(AgentBuildData), "Banner")]
		internal class PocColorModColorsFromBanner
		{
			public static bool Prefix(ref AgentBuildData __instance, ref Banner banner)
			{
				try
				{
					//Log.write("AgentBuildData: Banner");

					//On Banner update, colors might have to be updated
					BasicCharacterObject character = __instance.AgentCharacter;

					string charName = character?.GetName()?.ToString();
                    
                    if (banner is object)
					{
                        CharacterObject chara = CharacterObject.FindFirst(c => c.Name.ToString().Equals(charName));
						int tier = chara?.Tier ?? 0;

                        (int mode, uint? c1, uint? c2, string newbanner, string newshield) = getBattleColorFromConfig(null, ref banner, charName, character.IsHero, character.IsMounted, character.IsRanged, tier, character.Culture.Name.ToString());
                        savedColorData = new ColorData(mode, c1, c2, newbanner, newshield);

                        if (c1 is object && c2 is object)
						{
							//Log.write("===> Update Agent colors and Shield: " + c1 + " " + c2);
							__instance.AgentData.ClothingColor1(c1.Value);
							__instance.AgentData.ClothingColor2(c2.Value);
						}

					}
				}
				catch (Exception e)
				{
					Log.write("Error caught:" + e.Message);
				}
				return true;
			}
		}

		/*
		 * **********************************
		 * THIS IS 3D CHARACTER IN BATTLE
		 * **********************************
		 */

	
		[HarmonyPatch(typeof(AgentBuildData), "ClothingColor1")]
		internal class PocColorModColor1
		{
			public static bool Prefix(ref AgentBuildData __instance, ref uint color, ref AgentBuildData __result)
			{
				try
				{
					//Log.write("AgentBuildData: ClothingColor1");

					BasicCharacterObject character = __instance.AgentCharacter;
					Banner banner = __instance.AgentBanner;
					if (character is object && banner is object)
					{
						//Banner already set, ignore to prevent override
						__result = __instance;
						return false;
					}

					uint color2 = __instance.AgentClothingColor2;
					updateAgentBuildDataColors(ref __instance, ref color, ref color2, true);
					
					//Log.write("===> Update Agent color1: " + color);

				}
				catch (Exception e)
				{
					Log.write(e.Message);
				}
				return true;
			}
		}


		/*
		 * **********************************
		 * THIS IS 3D CHARACTER IN BATTLE
		 * **********************************
		 */

	
		[HarmonyPatch(typeof(AgentBuildData), "ClothingColor2")]
		internal class PocColorModColor2
		{
			public static bool Prefix(ref AgentBuildData __instance, ref uint color, ref AgentBuildData __result)
			{
				try
				{
					//Log.write("AgentBuildData: ClothingColor2");

					BasicCharacterObject character = __instance.AgentCharacter;
					Banner banner = __instance.AgentBanner;

					if (character is object && banner is object)
					{
						//Banner already set, ignore to prevent override
						__result = __instance;
						return false;
					}

					uint color1 = __instance.AgentClothingColor1;
					updateAgentBuildDataColors(ref __instance, ref color1, ref color, false);

					//Log.write("===>  Update Agent color2: " + color);

				}
				catch (Exception e)
				{
					Log.write(e.Message);
				}
				return true;
			}
		}


       /*
		* ******************************************
		* Icons and characters in CLAN / PARTY UI
		* ******************************************
		*/
        [HarmonyPatch(typeof(ClanPartyItemVM), "RefreshValues")]
		internal class PocColorModClanPartyItemVM
		{
			public static bool Prefix(ClanPartyItemVM __instance, ref ColorData __state)
			{
				//Log.write("ClanPartyItemVM RefreshValues Prefix");
				try
				{
					string clan = "";
					Banner banner = null;

                    CharacterObject chara = (CharacterObject)Traverse.Create(__instance).Field("_leader").GetValue();

                    Clan clanParty = __instance.Party.LeaderHero.Clan;
					clan = clanParty.Name.ToString();

                    string charName = __instance.Name;

                    bool isRanged = chara.IsRanged;
					bool isMounted = chara.IsMounted;
					int tier = chara.Tier;
					string culture = chara.Culture.Name.ToString();

                    (int mode, uint? c1, uint? c2, string newBanner, string newShield) = getColorFromConfig(clan, ref banner, charName, true, isMounted, isRanged, tier, culture);
                    __state = new ColorData(mode, c1, c2, newBanner, newShield);

                    CharacterViewModel cm = __instance.CharacterModel;
					cm.BannerCodeText = banner.ToString();

                    ImageIdentifierVM ivm = (ImageIdentifierVM)Traverse.Create(__instance).Field("_leaderVisual").GetValue();
					ImageIdentifier imageIdentifierCode = (ImageIdentifier)Traverse.Create(ivm).Field("_imageIdentifierCode").GetValue();
					CharacterCode charCode = CharacterCode.CreateFrom(imageIdentifierCode.Id);

                    if (c1 is object)
					{
						charCode.Color1 = (uint)c1;
					}
					if (c2 is object)
					{
						charCode.Color2 = (uint)c2;
					}

                    //Reconstruct code
                    string newcode = charCode.CreateNewCodeString();
					ImageIdentifierVM newvm = new ImageIdentifierVM(newcode, ImageIdentifierType.Character);
					Traverse.Create(__instance).Field("_leaderVisual").SetValue(newvm);

                }
                catch (Exception e)
				{
					Log.write(e.Message);
				}
				return true;
			}

            public static void Postfix(ClanPartyItemVM __instance, ref ColorData __state)
			{
				try
				{
					CharacterViewModel cm = __instance.CharacterModel;

					string banner = null;
					if (__state.newshield is object)
					{
						banner = __state.newshield;
					}
					else if (__state.newbanner is object)
					{
						banner = __state.newbanner;
					}
					cm.BannerCodeText = banner;

					if (__state.c1 is object)
					{
						Traverse.Create(cm).Field("_armorColor1").SetValue((uint)__state.c1);

					}
					if (__state is object)
					{
						Traverse.Create(cm).Field("_armorColor2").SetValue((uint)__state.c2);
					}
				}
				catch (Exception e)
				{
					Log.write(e.Message);
				}
            }
        }

		/*
		* ******************************************
		* Icons and characters in CLAN / PARTY UI
		* ******************************************
	    */
        [HarmonyPatch(typeof(ClanPartyMemberItemVM), "RefreshValues")]
        internal class PocColorModClanPartyMemberItemVM
        {
            public static bool Prefix(ClanPartyMemberItemVM __instance)
            {
                //Log.write("ClanPartyMemberItemVM RefreshValues");
                try
                {
                    string clan = "";
                    Banner banner = null;

					//__instance.Troop.Character
					Hero hero = __instance.HeroObject;
                    if (hero is object)
                    {
                        clan = hero.Clan.Name.ToString();
                        banner = hero.ClanBanner;
                    }

                    string charName = __instance.Name;
					CharacterObject chara = hero.CharacterObject;

                    bool isRanged = chara.IsRanged;
                    bool isMounted = chara.IsMounted;
                    int tier = chara.Tier;
                    string culture = chara.Culture.Name.ToString();

                    (int mode, uint? c1, uint? c2, string newBanner, string newShield) = getColorFromConfig(clan, ref banner, charName, true, isMounted, isRanged, tier, culture);
                    if (newShield is object)
                    {
                        banner = new Banner(newShield);
                    }
                    else if (newBanner is object)
                    {
                        banner = new Banner(newBanner);
                    }
					
                    __instance.Banner_9 = new ImageIdentifierVM(BannerCode.CreateFrom(banner), true);

                    ImageIdentifierVM ivm = (ImageIdentifierVM)Traverse.Create(__instance).Field("_visual").GetValue();
                    ImageIdentifier imageIdentifierCode = (ImageIdentifier)Traverse.Create(ivm).Field("_imageIdentifierCode").GetValue();
                    CharacterCode charCode = CharacterCode.CreateFrom(imageIdentifierCode.Id);

                    if (c1 is object)
                    {
                        charCode.Color1 = (uint)c1;
                    }
                    if (c2 is object)
                    {
                        charCode.Color2 = (uint)c2;
                    }
                    
                    //Reconstruct code
                    string newcode = charCode.CreateNewCodeString();
                    ImageIdentifierVM newvm = new ImageIdentifierVM(newcode, ImageIdentifierType.Character);
                    Traverse.Create(__instance).Field("_visual").SetValue(newvm);
                }
                catch (Exception e)
                {
                    Log.write(e.Message);
                }
                return true;
            }
        }

        /*
		* ******************************************
		* Icons and characters PARTY UI
		* ******************************************
	    */

        //[HarmonyPatch(typeof(PartyCharacterVM), "Character", MethodType.Setter)]

        [HarmonyPatch(typeof(PartyCharacterVM), "RefreshValues")]
        internal class PocColorModPartyCharacterVM
        {
			public static void Postfix(PartyCharacterVM __instance)
			{
                //Log.write("PartyCharacterVM RefreshValues");
                
				try
                {
					string clan = "";
					Banner banner = null;
                    
                    //__instance.Troop.Character
                    PartyVM partyVM = (PartyVM)Traverse.Create(__instance).Field("_partyVm").GetValue();
                    if (partyVM is object )
					{
                        HeroViewModel hvm = partyVM.SelectedCharacter;
                        Hero hero = (Hero)Traverse.Create(hvm).Field("_hero").GetValue();
						if (hero is object)
						{
							clan = hero.Clan.Name.ToString();
							banner = hero.ClanBanner;
						}
                    }

                    string charName = __instance.Name;
                    CharacterObject chara = __instance.Character;

                    bool isHero = chara.IsHero;
                    bool isRanged = chara.IsRanged;
                    bool isMounted = chara.IsMounted;
                    int tier = chara.Tier;
					string culture = chara.Culture.Name.ToString();
					
                    (int mode, uint? c1, uint? c2, string newBanner, string newShield) = getColorFromConfig(clan, ref banner, charName, isHero, isMounted, isRanged, tier, culture);
                    if (newShield is object)
                    {
                        banner = new Banner(newShield);
                    }
                    else if (newBanner is object)
                    {
                        banner = new Banner(newBanner);
                    }

                    ImageIdentifierVM ivm = __instance.Code;
                    ImageIdentifier imageIdentifierCode = (ImageIdentifier)Traverse.Create(ivm).Field("_imageIdentifierCode").GetValue();
                    CharacterCode charCode = CharacterCode.CreateFrom(imageIdentifierCode.Id);

                    if (c1 is object)
                    {
                        charCode.Color1 = (uint)c1;
                    }
                    if (c2 is object)
                    {
                        charCode.Color2 = (uint)c2;
                    }
                    
                    //Reconstruct code
                    string newcode = charCode.CreateNewCodeString();
                    ImageIdentifierVM vm = new ImageIdentifierVM(newcode, ImageIdentifierType.Character);
					__instance.Code = vm;

                }
                catch (Exception e)
                {
                    Log.write(e.Message);
                }
                //return true;
            }
		}

        /*
		* ***********************************************************************
		* Icons and characters PARTY UI: handle troop upgrades
		* ***********************************************************************
	    */
        [HarmonyPatch(typeof(PartyCharacterVM), "Character", MethodType.Setter)]
		internal class PocColorModPartyCharacterVMCharacter
        {
            public static void Postfix(PartyCharacterVM __instance)
            {
                //Log.write("PartyCharacterVM RefreshValues");
                
				try
                {
                string clan = "";
                Banner banner = null;

                //__instance.Troop.Character
                PartyVM partyVM = (PartyVM)Traverse.Create(__instance).Field("_partyVm").GetValue();
                if (partyVM is object)
                {
                    HeroViewModel hvm = partyVM.SelectedCharacter;
                    Hero hero = (Hero)Traverse.Create(hvm).Field("_hero").GetValue();
                    if (hero is object)
                    {
                        clan = hero.Clan.Name.ToString();
                        banner = hero.ClanBanner;
                    }
                }

                string charName = __instance.Name;
                CharacterObject chara = __instance.Character;

                bool isHero = chara.IsHero;
                bool isRanged = chara.IsRanged;
                bool isMounted = chara.IsMounted;
                int tier = chara.Tier;
                string culture = chara.Culture.Name.ToString();

                (int mode, uint? c1, uint? c2, string newBanner, string newShield) = getColorFromConfig(clan, ref banner, charName, isHero, isMounted, isRanged, tier, culture);
                if (newShield is object)
                {
                    banner = new Banner(newShield);
                }
                else if (newBanner is object)
                {
                    banner = new Banner(newBanner);
                }

                ImageIdentifierVM ivm = __instance.Code;
                ImageIdentifier imageIdentifierCode = (ImageIdentifier)Traverse.Create(ivm).Field("_imageIdentifierCode").GetValue();
                CharacterCode charCode = CharacterCode.CreateFrom(imageIdentifierCode.Id);

                if (c1 is object)
                {
                    charCode.Color1 = (uint)c1;
                }
                if (c2 is object)
                {
                    charCode.Color2 = (uint)c2;
                }

                //Reconstruct code
                string newcode = charCode.CreateNewCodeString();
                ImageIdentifierVM vm = new ImageIdentifierVM(newcode, ImageIdentifierType.Character);
                __instance.Code = vm;

                }
                catch (Exception e)
                {
                    Log.write(e.Message);
                }
                //return true;
            }
        }

        [HarmonyPatch(typeof(GameMenuPartyItemVM), "RefreshValues")]
        internal class PocColorModGameMenuPartyItemVM
        {
            public static bool Prefix(GameMenuPartyItemVM __instance)
            {
				try
				{ 
                //Log.write("GameMenuPartyItemVM RefreshValues");

                string clan = "";
                Banner banner = null;

                //__instance.Troop.Character
                PartyBase party = (PartyBase)Traverse.Create(__instance).Field("Party").GetValue();
                if (party is object)
                {
					Hero hero = party.Owner;
                    if (hero is object)
                    {
                        clan = hero.Clan?.Name.ToString() ?? "";
                        banner = hero.ClanBanner;
                    }
                }
                CharacterObject chara = (CharacterObject)Traverse.Create(__instance).Field("Character").GetValue();
				
				string charName = "";
				bool isRanged = false;
                bool isMounted = false;
                int tier = 0;
                string culture = "";

                if (chara is null)
				{
                    chara = PartyBaseHelper.GetVisualPartyLeader(party);
                }

                charName = chara?.Name.ToString() ?? "";
                    
				bool isHero = chara.IsHero;

                isRanged = chara.IsRanged;
                isMounted = chara.IsMounted;
                tier = chara.Tier;
                culture = chara.Culture.Name.ToString();

                //Log.write("CharName is:" + charName);


                (int mode, uint? c1, uint? c2, string newBanner, string newShield) = getColorFromConfig(clan, ref banner, charName, isHero, isMounted, isRanged, tier, culture);
                if (newShield is object)
                {
                    banner = new Banner(newShield);
                }
                else if (newBanner is object)
                {
                    banner = new Banner(newBanner);
                }

				if (banner is object)
				{
					__instance.Banner_9 = new ImageIdentifierVM(BannerCode.CreateFrom(banner), true);
				}

                ImageIdentifierVM ivm = (ImageIdentifierVM)Traverse.Create(__instance).Field("_visual").GetValue();
                CharacterCode charCode = CharacterCode.CreateFrom(ivm.Id);

                if (c1 is object)
                {
                    charCode.Color1 = (uint)c1;
                }
                if (c2 is object)
                {
                    charCode.Color2 = (uint)c2;
                }

                //Reconstruct code
                string newcode = charCode.CreateNewCodeString();
                ImageIdentifierVM vm = new ImageIdentifierVM(newcode, ImageIdentifierType.Character);
                Traverse.Create(__instance).Field("_visual").SetValue(vm);
                }
                catch (Exception e)
                {
                    Log.write(e.Message);
                }
                return true;
            }
        }

        [HarmonyPatch(typeof(OrderOfBattleHeroItemVM), "RefreshValues")]
        internal class PocColorModOrderOfBattleHeroItemVM
        {
            public static void Postfix(OrderOfBattleHeroItemVM __instance)
            {
                //Log.write("OrderOfBattleHeroItemVM RefreshValues");
				try
				{

				
                Agent agent = (Agent)Traverse.Create(__instance).Field("Agent").GetValue();
				
				string charName = null;

                if (agent is object)
				{
                    charName = agent?.Name ?? charName;
                    //Log.write("char name is:" + charName);
                }

                string clan = "";
                Banner banner = null;

				CharacterObject chara = null;

				if (charName is object)
				{
					Hero hero = Hero.FindFirst(h => h.Name.ToString().Equals(charName));
					if (hero is object)
					{
						//Log.write("Hero is:" + hero.Name.ToString());

						clan = hero.Clan.Name.ToString();
						banner = hero.ClanBanner;
						chara = hero.CharacterObject;
					}

					bool isRanged = false;
					bool isMounted = false;
					int tier = 0;
					string culture = "";

					charName = chara?.Name.ToString() ?? "";

					isRanged = chara?.IsRanged ?? false;
					isMounted = chara?.IsMounted ?? false;
					tier = chara?.Tier ?? 0;
					culture = chara?.Culture.Name.ToString() ?? "";


					(int mode, uint? c1, uint? c2, string newBanner, string newShield) = getColorFromConfig(clan, ref banner, charName, true, isMounted, isRanged, tier, culture);

					ImageIdentifierVM ivm = (ImageIdentifierVM)Traverse.Create(__instance).Field("_imageIdentifier").GetValue();

					if (ivm is object)
					{
						CharacterCode charCode = CharacterCode.CreateFrom(ivm.Id);

						if (c1 is object)
						{
							charCode.Color1 = (uint)c1;
						}
						if (c2 is object)
						{
							charCode.Color2 = (uint)c2;
						}

						//Reconstruct code
						string newcode = charCode.CreateNewCodeString();
						ImageIdentifierVM vm = new ImageIdentifierVM(newcode, ImageIdentifierType.Character);
						__instance.ImageIdentifier = vm;
					}
				}
                }
                catch (Exception e)
                {
                    Log.write(e.Message);
                }
            }
        }

        [HarmonyPatch(typeof(OrderOfBattleHeroItemVM), "RefreshInformation")]
        internal class PocColorModOrderOfBattleHeroItemVMRefreshInformation
        {
            public static void Postfix(OrderOfBattleHeroItemVM __instance)
            {
                //Log.write("OrderOfBattleHeroItemVM RefreshInformation");
				try { 

                Agent agent = (Agent)Traverse.Create(__instance).Field("Agent").GetValue();

                string charName = null;

                if (agent is object)
                {
                    charName = agent?.Name ?? charName;
                    //Log.write("char name is:" + charName);
                }

                string clan = "";
                Banner banner = null;

                CharacterObject chara = null;

                if (charName is object)
                {
                    Hero hero = Hero.FindFirst(h => h.Name.ToString().Equals(charName));
                    if (hero is object)
                    {
                        //Log.write("Hero is:" + hero.Name.ToString());

                        clan = hero.Clan.Name.ToString();
                        banner = hero.ClanBanner;
                        chara = hero.CharacterObject;
                    }

                    bool isRanged = false;
                    bool isMounted = false;
                    int tier = 0;
                    string culture = "";

                    charName = chara?.Name.ToString() ?? "";

                    isRanged = chara?.IsRanged ?? false;
                    isMounted = chara?.IsMounted ?? false;
                    tier = chara?.Tier ?? 0;
                    culture = chara?.Culture.Name.ToString() ?? "";


                    (int mode, uint? c1, uint? c2, string newBanner, string newShield) = getColorFromConfig(clan, ref banner, charName, true, isMounted, isRanged, tier, culture);

                    ImageIdentifierVM ivm = (ImageIdentifierVM)Traverse.Create(__instance).Field("_imageIdentifier").GetValue();

                    if (ivm is object)
                    {
                        CharacterCode charCode = CharacterCode.CreateFrom(ivm.Id);

                        if (c1 is object)
                        {
                            charCode.Color1 = (uint)c1;
                        }
                        if (c2 is object)
                        {
                            charCode.Color2 = (uint)c2;
                        }

                        //Reconstruct code
                        string newcode = charCode.CreateNewCodeString();
                        ImageIdentifierVM vm = new ImageIdentifierVM(newcode, ImageIdentifierType.Character);
                        __instance.ImageIdentifier = vm;
                    }
                }

                }
                catch (Exception e)
                {
                    Log.write(e.Message);
                }
            }
        }

		/**
		 * 
		 * Used to generate Characters for cinematics
		 * 
		 */
        [HarmonyPatch(typeof(CampaignSceneNotificationHelper), "CreateNotificationCharacterFromHero")]
        internal class PocColorModDefaultCreateNotificationCharacterFromHero
        {
            public static bool Prefix(ref SceneNotificationData.SceneNotificationCharacter __result, Hero hero, Equipment overridenEquipment = null, bool useCivilian = false, BodyProperties overriddenBodyProperties = default(BodyProperties), bool useHorse = false, uint overriddenColor1 = 4294967295, uint overriddenColor2 = 4294967295 )
            {
                //Log.write("CampaignSceneNotificationHelper CreateNotificationCharacterFromHero");
				try { 

				string clan = hero?.Clan?.Name.ToString() ?? "";
				Banner banner = hero.ClanBanner;
				string charName = hero.Name.ToString();

                bool isRanged = hero.CharacterObject.IsRanged;
                bool isMounted = hero.CharacterObject.IsMounted;
                int tier = hero.CharacterObject.Tier;
				string culture = hero.Culture.Name.ToString();

                (int mode, uint? c1, uint? c2, string newBanner, string newShield) = getColorFromConfig(clan, ref banner, charName, true, isMounted, isRanged, tier, culture);
                if (newShield is object)
                {
                    banner = new Banner(newShield);
                }
                else if (newBanner is object)
                {
                    banner = new Banner(newBanner);
                }

                IFaction mapFaction = hero.MapFaction;
                if (overriddenColor1 == uint.MaxValue)
                {
                     overriddenColor1 = mapFaction != null ? mapFaction.Color : hero.CharacterObject.Culture.Color;
                }
                if (overriddenColor2 == uint.MaxValue)
                {
                    overriddenColor2 = mapFaction != null ? mapFaction.Color2 : hero.CharacterObject.Culture.Color2;
                }

                if (c1 is object)
                {
                    overriddenColor1 = (uint)c1;
                }
                if (c2 is object)
                {
                    overriddenColor2 = (uint)c2;
                }

                if (overridenEquipment == null)
                    overridenEquipment = useCivilian ? hero.CivilianEquipment : hero.BattleEquipment;
                __result= new SceneNotificationData.SceneNotificationCharacter((BasicCharacterObject)hero.CharacterObject, overridenEquipment, overriddenBodyProperties, useCivilian, overriddenColor1, overriddenColor2, useHorse);

                }
                catch (Exception e)
                {
                    Log.write(e.Message);
                    return true;
                }
                return false;
            }
        }

        

        [HarmonyPatch(typeof(TroopSelectionItemVM))]
        [HarmonyPatch(MethodType.Constructor)]
        [HarmonyPatch(new Type[] { typeof(TroopRosterElement) , typeof(Action<TroopSelectionItemVM>), typeof(Action<TroopSelectionItemVM>) })]
        internal class PocColorModTroopSelectionItemVM
        {
            public static void Postfix(TroopSelectionItemVM __instance)
            {
                //Log.write("TroopSelectionItemVM CTOR");
				try { 

                TroopRosterElement troop = __instance.Troop;
                CharacterObject chara = troop.Character;
				string clan = "";

				string charName = __instance.Name;
                Banner banner = null;

				if (chara is object)
				{
					if (chara.HeroObject is object)
					{
						charName = chara.HeroObject.Name.ToString();
						clan = chara.HeroObject.Clan.Name.ToString();
						banner = chara.HeroObject.ClanBanner;
					}
					else {
                        charName = chara.Name.ToString();
						clan = Clan.PlayerClan.Name.ToString();
                    }
                }
                //Log.write("char name is:" + charName);

                if (charName is object)
                {

                    bool isRanged;
                    bool isMounted;
                    int tier;
                    string culture;

                    charName = chara?.Name.ToString() ?? "";

                    isRanged = chara?.IsRanged ?? false;
                    isMounted = chara?.IsMounted ?? false;
                    tier = chara?.Tier ?? 0;
                    culture = chara?.Culture.Name.ToString() ?? "";


                    (int mode, uint? c1, uint? c2, string newBanner, string newShield) = getColorFromConfig(clan, ref banner, charName, true, isMounted, isRanged, tier, culture);

					ImageIdentifierVM ivm = __instance.Visual;

                    if (ivm is object)
                    {
                        CharacterCode charCode = CharacterCode.CreateFrom(ivm.Id);

                        if (c1 is object)
                        {
                            charCode.Color1 = (uint)c1;
                        }
                        if (c2 is object)
                        {
                            charCode.Color2 = (uint)c2;
                        }

                        //Reconstruct code
                        string newcode = charCode.CreateNewCodeString();
                        ImageIdentifierVM vm = new ImageIdentifierVM(newcode, ImageIdentifierType.Character);
                        __instance.Visual = vm;
                    }
                }
                }
                catch (Exception e)
                {
                    Log.write(e.Message);
                }
            }
        }

        [HarmonyPatch(typeof(CharacterViewModel), "ArmorColor1", MethodType.Setter)]
		internal class PocColorModVMColor1
		{
			public static bool Prefix(CharacterViewModel __instance, ref uint value)
			{
				try
				{
                    //Log.write("CharacterViewModel c1");
                    //REMOVE UNITNAMES CharInfo character = unitNames[__instance.CharStringId];

                    
                    CharacterObject chara = null;

                    if (__instance.CharStringId is object)
                    {
                        chara = CharacterObject.Find(__instance.CharStringId);
                    }
                    //Log.write("chara ID:" + __instance.CharStringId);
                    //Log.write("chara :" + chara);

					//Log.write("CharacterViewModel ArmorColor1 [" + character?.name + "]");
					string charName = chara?.Name.ToString() ?? "";
                    bool isHero = chara?.IsHero ?? false;
                    bool isMounted = chara?.IsMounted ?? false;
                    bool isRanged = chara?.IsRanged ?? false;
                    int tier = chara?.Tier ?? 0;
                    string culture = chara?.Culture.Name.ToString() ?? "";
                    

                    if (__instance.BannerCodeText is object)
					{
						string bannerStr = __instance.BannerCodeText;

                        //update color only if we have a banner defined
                        (int mode, uint? c1, uint? c2,string newbanner, string newshiel) = getColorFromConfig(null, ref bannerStr, charName, isHero, isMounted, isRanged, tier, culture);
						if (c1 is object && c2 is object)
						{
							return false;
						}
					}
				}
				catch (Exception e)
				{
					Log.write("Error caught:" + e.Message);
				}
				//Log.write("Update CharacterViewModel color1 " + value + " for char " + charName);
				return true;
			}
		}

		[HarmonyPatch(typeof(CharacterViewModel), "ArmorColor2", MethodType.Setter)]
		internal class PocColorModVMColor2
		{
			public static bool Prefix(CharacterViewModel __instance, ref uint value)
			{
				//Log.write("CharacterViewModel c2");
				try
				{
                    //REMOVE UNITNAMES CharInfo character = unitNames[__instance.CharStringId];
					//Log.write("CharacterViewModel ArmorColor2 [" + character?.name + "]");

					CharacterObject chara = null;

                    if (__instance.CharStringId is object)
					{
						chara = CharacterObject.Find(__instance.CharStringId);
                    }

                    //Log.write("chara ID:" + __instance.CharStringId);
                    //Log.write("chara :" + chara);

                    string charName = chara?.Name.ToString() ?? "";
                    bool isHero = chara?.IsHero ?? false;
                    bool isMounted = chara?.IsMounted ?? false;
                    bool isRanged = chara?.IsRanged ?? false;
                    int tier = chara?.Tier ?? 0;
                    string culture = chara?.Culture.Name.ToString() ?? "";

                    if (__instance.BannerCodeText is object)
					{
						string bannerStr = __instance.BannerCodeText;

                        //update color only if we have a banner defined
                        (int mode, uint? c1, uint? c2, string newbanner, string newshiel) = getColorFromConfig(null, ref bannerStr, charName, isHero, isMounted, isRanged, tier, culture);

                        if (c1 is object && c2 is object)
						{
                            return false;
						}
					
					}
				}
				catch (Exception e)
				{
					Log.write("Error caught:" + e.Message);
				}
                //Log.write("Update CharacterViewModel color2: " + value + " for char " + charName);
                return true;
			}
		}

        /*   REMOVE UNITNAMES
         * 
		[HarmonyPatch(typeof(CharacterViewModel), "FillFrom")]
		internal class PocColorModGetCharName
		{
			public static void Postfix(ref CharacterViewModel __instance, BasicCharacterObject character)
			{
				Log.write("CharacterViewModel FillFrom");
				//We fetch the characterName when FillFrom is called
				try
				{
					//Log.write("CharacterViewModel FillFrom [" + character?.GetName().ToString() + "]");
					unitNames.TryAdd(__instance.CharStringId, new CharInfo(character.GetName().ToString(),character.IsHero));
				}
				catch (Exception e)
				{
					Log.write("Error caught:" + e.Message);
				}
			}
		}
		*/

        /*
		 * ************************************************
		 * THIS IS PARTY SCREEN: ALL CHARACTERS
		 * ************************************************
		 */
        [HarmonyPatch(typeof(PartyVM), "RefreshCurrentCharacterInformation")]
		internal class PocColorModPartyVM
		{
			public static void Postfix(ref PartyVM __instance)
			{
				try {
					//Log.write("PartyVM RefreshCurrentCharacterInformation");

					//string charName = __instance.CurrentCharacter?.Character?.Name?.ToString();
					//bool isHero = __instance.CurrentCharacter?.Character.IsHero ?? false;
					
					Hero hero = (Hero)Traverse.Create(__instance.CurrentCharacter).Field("_hero").GetValue();

					CharacterObject chara;
					string clan = null;

                    if (!(hero is object))
					{
						//REMOVE UNITNAMES character = unitNames[__instance.SelectedCharacter.CharStringId];
						//REMOVE UNITNAMES charName = character.name;
						//REMOVE UNITNAMES isHero = character.isHero;
						chara = CharacterObject.Find(__instance.SelectedCharacter.CharStringId);
					}
					else
					{
                        chara = hero.CharacterObject;
						clan = hero.Clan.Name.ToString();
                    }
                    
                    string charName = chara.Name.ToString();
                    bool isHero = chara.IsHero;

                    //Log.write("PartyVM RefreshCurrentCharacterInformation [" + charName + "]");

                    string bannerStr = __instance.SelectedCharacter?.BannerCodeText;
					
					if (bannerStr is object)
					{
						Banner banner = new Banner(bannerStr);

                        //updateCache(bannerStr, charName);
                        (int mode, uint? c1, uint? c2, string newbanner, string newshield) = getColorFromConfig(clan, ref banner, ref bannerStr, charName, isHero, chara.IsMounted, chara.IsRanged, chara.Tier, chara.Culture.Name.ToString());
						if (c1 is object && c2 is object)
						{
							//Log.write("===> Update Current Character colors and banner: " + c1 + " " + c2 + " " + bannerStr + " for char:" + charName);
						
							__instance.SelectedCharacter.BannerCodeText = bannerStr;
							
							Traverse.Create(__instance.SelectedCharacter).Field("_armorColor1").SetValue(c1);
							Traverse.Create(__instance.SelectedCharacter).Field("_armorColor2").SetValue(c2);
							__instance.SelectedCharacter.OnPropertyChanged(nameof(__instance.SelectedCharacter.ArmorColor1));
							__instance.SelectedCharacter.OnPropertyChanged(nameof(__instance.SelectedCharacter.ArmorColor2));
						}
					}
					
				}
				catch (Exception e)
				{
					Log.write(e.Message);
				}
			}
		}


		/*
		 * **********************************
		 * 3D HERO: party and screens
		 * **********************************
		 */
        [HarmonyPatch(typeof(HeroViewModel), "FillFrom")]
		internal class PocColorModHeroFillFrom
		{
			public static void Postfix(ref HeroViewModel __instance, ref Hero hero)
			{
			
				
				try
				{
					//Log.write("HeroViewModel FillFrom");

                    CharacterObject chara = hero.CharacterObject;
                    string charName = chara.Name.ToString();
                    string clan = hero.Clan.Name.ToString();

                    string bannerStr = __instance?.BannerCodeText;
					//Log.write("HeroViewModel FillFrom [" + charName + "]");

					if (bannerStr is object || clan is object)
					{

						Banner banner = new Banner(bannerStr);

                        //updateCache(bannerStr, charName);
                        (int mode, uint? c1, uint? c2, string newbanner, string newshield) = getColorFromConfig(clan, ref banner, ref bannerStr, charName, true, chara.IsMounted, chara.IsRanged, chara.Tier, chara.Culture.Name.ToString() );
						if (c1 is object && c2 is object)
						{
							//Log.write("===> Update Current Character colors and banner: " + c1 + " " + c2 + " " + bannerStr + " for char:" + charName);

							__instance.BannerCodeText = bannerStr;

							Traverse.Create(__instance).Field("_armorColor1").SetValue(c1);
							Traverse.Create(__instance).Field("_armorColor2").SetValue(c2);
							__instance.OnPropertyChanged(nameof(__instance.ArmorColor1));
							__instance.OnPropertyChanged(nameof(__instance.ArmorColor2));
						}
					}
				}
				catch (Exception e)
				{
					Log.write(e.Message);
				}
			}
		}


        /*
		 * ***********************************************
		 * 2D ICONS: Update the banner in the CLAN UI
		 * ***********************************************
		 */
        [HarmonyPatch(typeof(ClanLordItemVM), "UpdateProperties")]
		internal class PocColorModClanLordItemVM
		{
			public static void Postfix(ref ClanLordItemVM __instance)
			{
				try
				{
					//Log.write("ClanLordItemVM UpdateProperties:");

					string bannerStr = __instance?.HeroModel?.BannerCodeText;

                    //bannerStr = DUMMY_BANNER3;

                    if (bannerStr is object)
					{
						__instance.Banner_9 = new ImageIdentifierVM(BannerCode.CreateFrom(new Banner(bannerStr)), true);
					}

                }
				catch (Exception e)
				{
					Log.write(e.Message);
				}
			}
		}

        /*
         ***********************************************************
		 * 2D ICONS: Update the units Color in the CLAN UI icons
		 ***********************************************************
		 */
        [HarmonyPatch(typeof(ClanLordItemVM), "RefreshValues")]
		internal class PocColorModClanLordItemVMRefreshValues
		{
			public static bool Prefix(ref ClanLordItemVM __instance)
			{
                try
                {
                    //Log.write("ClanLordItemVM RefreshValues:");

					//Get Character Data

					//Change colors of character

					ImageIdentifierVM visuals = (ImageIdentifierVM)Traverse.Create(__instance).Field("_visual").GetValue();
					ImageIdentifier imageIdentifierCode = (ImageIdentifier)Traverse.Create(visuals).Field("_imageIdentifierCode").GetValue();
					CharacterCode charCode = CharacterCode.CreateFrom(imageIdentifierCode.Id);
					
                    Hero hero = __instance.GetHero();
					Banner banner = hero.ClanBanner;
					string charName = hero.Name.ToString();

                    //Log.write("Clan is:" + hero.Clan.Name);
                    //Log.write("Char is:" + hero.Name);
					//Log.write("Banner is:" + hero.ClanBanner.ToString());

					string clan = hero.Clan.Name.ToString();
                    bool isRanged = hero.CharacterObject.IsRanged;
					bool isMounted = hero.CharacterObject.IsMounted;
                    int tier = hero.CharacterObject.Tier;

                    (int mode, uint? c1, uint? c2, string newBanner, string newShield) = getColorFromConfig(clan, ref banner, charName, true, isMounted, isRanged, tier, hero.Culture.Name.ToString());
                    if (newShield is object)
                    {
                        banner = new Banner(newShield);
                    }
                    else if (newBanner is object)
                    {
                        banner = new Banner(newBanner);
                    }

                    if (c1 is object)
					{
						charCode.Color1 = (uint)c1;
                    }
                    if (c2 is object)
                    {
                        charCode.Color2 = (uint)c2;
                    }
                    __instance.Banner_9 = new ImageIdentifierVM(BannerCode.CreateFrom(banner), true);

                    //Reconstruct code
                    string newcode = charCode.CreateNewCodeString();
					ImageIdentifierVM vm = new ImageIdentifierVM(newcode, ImageIdentifierType.Character);
	                Traverse.Create(__instance).Field("_visual").SetValue(vm);
                }
                catch (Exception e)
                {
                    Log.write(e.Message);
                }
                return true;
			}
        }

        //[HarmonyPatch(typeof(HeroVM))]
        //[HarmonyPatch(MethodType.Constructor)]
        //[HarmonyPatch(new Type[] { typeof(Hero) , typeof(bool) })]

        [HarmonyPatch(typeof(HeroVM), "RefreshValues")]
        internal class PocColorModHeroVM
		{
			public static bool Prefix(ref HeroVM __instance)
			{
				try
				{
					//Log.write("HeroVM RefreshValues:");
					Hero hero = __instance.Hero;

                    Banner banner = hero?.ClanBanner;
					string charName = hero?.Name.ToString() ?? "";
					Clan clan = hero?.Clan ;

					string clanName = null;

                    if (clan is object)
					{
						clanName = hero?.Clan.Name.ToString() ?? null;
					}

                    CharacterObject chara = hero?.CharacterObject;
                    
                    if (banner is object || clan is object )
					{
                        (int mode, uint? c1, uint? c2, string newBanner, string newShield) = getColorFromConfig(clanName, ref banner, charName, true, chara.IsMounted, chara.IsRanged, chara.Tier, chara.Culture.Name.ToString());
						if (newShield is object)
						{
							banner = new Banner(newShield);
						}
						else if (newBanner is object) {
							banner = new Banner(newBanner);
						}

						//banner = new Banner(DUMMY_BANNER2);

                        __instance.ClanBanner = new ImageIdentifierVM(banner);
						__instance.ClanBanner_9 = new ImageIdentifierVM(BannerCode.CreateFrom(new Banner(banner)), true);
                        
						CharacterCode characterCode = CampaignUIHelper.GetCharacterCode(hero.CharacterObject, false);
                        if (c1 is object)
						{
							characterCode.Color1 = c1.Value;
						}
                        if (c2 is object)
                        {
							characterCode.Color2 = c2.Value;
                        }
                        string newcode = characterCode.CreateNewCodeString();
                        __instance.ImageIdentifier = new ImageIdentifierVM(newcode, ImageIdentifierType.Character);
                    }
				}
				catch (Exception e)
				{
					Log.write(e.Message);
				}
				return true;
			}
		}

		/*
		 * **********************************
		 * 3D HERO: INVENTORY
         * **********************************
         */
		
		[HarmonyPatch(typeof(SPInventoryVM), "UpdateCurrentCharacterIfPossible")]
		internal class PocColorModSPInventoryVM
		{
			public static void Postfix(ref SPInventoryVM __instance)
			{

				try {
                    //Log.write("SPInventoryVM UpdateCurrentCharacterIfPossible");
                    					
					CharInfo character = null;
					CharacterObject current = (CharacterObject) Traverse.Create(__instance).Field("_currentCharacter").GetValue();

                    string charName = current?.Name?.ToString();
                    bool isHero = current?.IsHero ?? false;
					bool isMounted = false;
                    bool isRanged = false;
                    int tier = 0;
					string culture = "";

                    string stringId = __instance.MainCharacter.CharStringId;
                    if (stringId is object)
                    {
                        CharacterObject chara = CharacterObject.Find(stringId);

                        charName = chara.Name.ToString();
                        isHero = chara.IsHero;
                        isMounted = chara.IsMounted;
                        isRanged = chara.IsRanged;
                        tier = chara.Tier;
                        culture = chara.Culture.Name.ToString();
                    }

                    string bannerStr = __instance.MainCharacter?.BannerCodeText;
                    //Log.write("SPInventoryVM UpdateCurrentCharacterIfPossible [" + charName + "]");

                    if (bannerStr is object)
                    {
						Banner banner = new Banner(bannerStr);

                        //updateCache(bannerStr, charName);

                        (int mode, uint? c1, uint? c2, string newbanner, string newshield) = getColorFromConfig(null, ref bannerStr, charName, isHero, isMounted, isRanged, tier, culture);
                        if (c1 is object && c2 is object)
                        {
                              //Log.write("===> Update Current Character colors and banner: " + c1 + " " + c2 + " " + bannerStr + " for char:" + charName);

                              __instance.MainCharacter.BannerCodeText = bannerStr;

                              Traverse.Create(__instance.MainCharacter).Field("_armorColor1").SetValue(c1);
                              Traverse.Create(__instance.MainCharacter).Field("_armorColor2").SetValue(c2);
                              __instance.MainCharacter.OnPropertyChanged(nameof(__instance.MainCharacter.ArmorColor1));
                              __instance.MainCharacter.OnPropertyChanged(nameof(__instance.MainCharacter.ArmorColor2));
                        }
                    }
                }
                catch (Exception e)
				{
					Log.write(e.Message);
				}
			}
		}


		/// <summary>
		/// 
		/// Peut-être faudrait-il surcharger ceci, pour mettre à jour les item dans les autres situations
		/// 
		/// EquipItemsFromSpawnEquipment()
		/// 
		/// </summary>
		/// 
		/// CODE UTILISE PAR LES MODES QUI AJOUTENT DES BANNIERES
		/// 
		/// 

		[HarmonyPatch(typeof(Agent), "EquipItemsFromSpawnEquipment")]
		internal class PocColorModAgentEquipItemsFromSpawnEquipment
		{
			public static bool Prefix(ref Agent __instance)
			{

				try
				{
                    //Log.write("Agent EquipItemsFromSpawnEquipment");

                    if (__instance?.Equipment is null)
					{
						//Log.write("No Equipment: return");
						return true;
					}


                    MissionWeapon? weaponOpt = __instance?.Equipment[EquipmentIndex.ExtraWeaponSlot];

                    bool isBanner = weaponOpt?.IsBanner() ?? false;
                    bool isShield = weaponOpt?.IsShield() ?? false;
                   
                    if (weaponOpt is object && ( "mod_banner_1".Equals(weaponOpt?.Item?.ToString()) || isBanner))
					{
                       
                        MissionWeapon weapon = (MissionWeapon) weaponOpt;

						Banner banner = weapon.Banner;
						string bannerStr = banner is object ? PocColorMod.SerializeBanner(banner) : null;
                        
                        if (bannerStr is object)
						{
							string clan = PocColorMod.bannerClanCache[bannerStr] ?? "";
							string kingdom = PocColorMod.bannerKingdomCache[bannerStr] ?? "";

							bool isClan(Clan c) { return c.Name.ToString() == clan; }
							Clan myclan = Clan.FindFirst(isClan);

							Banner newOverrideBanner = banner;
							Banner newOverrideShield = banner;
                            
                            if (myclan is Object)
							{
								newOverrideBanner = myclan.Banner;
							}
                            // i can getConfig to fetch the corresponding banner and shields and see if i need to override

                            //(string newbanner, string newshield) = getBannerFromConfig(bannerStr, __instance.Name);
                            
                            String charName = __instance.Name;
                            CharacterObject chara = CharacterObject.FindFirst(c => c.Name.ToString().Equals(charName));

                            (int mode, uint? c1, uint? c2, string newbanner, string newshield) = getBattleColorFromConfig(null, ref bannerStr, __instance.Name, __instance.IsHero, chara.IsMounted, chara.IsRanged, chara.Tier, chara.Culture.Name.ToString() );

							if (newbanner is Object)
							{
								//If newBanner exists we override clan Banner with It
								newOverrideBanner = new Banner(newbanner);
							}
							if (newshield is Object)
							{
								//If newBanner exists we override clan Banner with It
								//	Log.write("update item with new shield:" + newshield);
								newOverrideShield = new Banner(newshield);
							}
                            
                            //Update all items with shield code
                            for (EquipmentIndex index = EquipmentIndex.WeaponItemBeginSlot; index < EquipmentIndex.ExtraWeaponSlot; ++index)
							{
								__instance.Equipment[index] = new MissionWeapon(__instance.Equipment[index].Item, __instance.Equipment[index].ItemModifier, newOverrideShield);
							}
							
							FieldInfo fi = typeof(MissionWeapon).GetField("<Banner>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance);
							TypedReference reference = __makeref(weapon);
							fi.SetValueDirect(reference, newOverrideBanner);

							String item = weapon.Item.ToString();
							
							//Update banner with banner code
							__instance.Equipment[EquipmentIndex.ExtraWeaponSlot] = new MissionWeapon(MBObjectManager.Instance.GetObject<ItemObject>(item), (ItemModifier)null, newOverrideBanner);
                            
                            //Reset colors according to Banner
                            if (c1 is object && c2 is object)
							{
								__instance.SetClothingColor1((uint)c1);
								__instance.SetClothingColor2((uint)c2);
							}
                            

                        }
                    }
                    
                }
                catch (Exception e)
				{
					Log.write("Error caught:" + e.Message);
				}
				return true;
			}
		}
		

        /// CODE UTILISE PAR LES MODES QUI AJOUTENT DES BANNIERES

        [HarmonyPatch(typeof(Agent), "EquipWeaponWithNewEntity")]
		internal class PocColorModAgentEquipNewEntity
		{
			public static bool Prefix(ref Agent __instance, ref MissionWeapon weapon)
			{
				try
				{
					//Log.write("Agent EquipWeaponWithNewEntity");

					//Log.write("EquipWeaponWithNewEntity [" + thread.ManagedThreadId  + "]");

					//Check Item Type
					string name = weapon.GetModifiedItemName()?.ToString() ?? "";
					Banner banner = weapon.Banner;
					string bannerStr = banner is object ? PocColorMod.SerializeBanner(banner) : null;

                    //Log.write("Item Weapon:" + weapon.GetType()?.Name + ", " + weapon.ToString() + ", " + weapon.Item.GetName());

                    if (bannerStr is object)
					{

						string clan = PocColorMod.bannerClanCache[bannerStr] ?? "";
						string kingdom = PocColorMod.bannerKingdomCache[bannerStr] ?? "";

						bool isClan(Clan c) { return c.Name.ToString() == clan; }
						Clan myclan = Clan.FindFirst(isClan);

						Banner newOverrideBanner = banner;
						Banner newOverrideShield = banner;

						if (myclan is Object)
						{
							newOverrideBanner = myclan.Banner;
						}
                        // i can getConfig to fetch the corresponding banner and shields and see if i need to override

                        //(string newbanner, string newshield) = getBannerFromConfig(bannerStr, __instance.Name);

                        String charName = __instance.Name;
                        CharacterObject chara = CharacterObject.FindFirst(c => c.Name.ToString().Equals(charName));

						int mode;
						uint? c1;
						uint? c2;
						string newbanner;
						string newshield;

                        if (savedColorData is object)
						{
							(mode, c1, c2, newbanner, newshield) = (savedColorData.mode, savedColorData.c1, savedColorData.c2, savedColorData.newbanner, savedColorData.newshield);
						} else
						{
                            (mode, c1, c2, newbanner, newshield) = getBattleColorFromConfig(clan, ref bannerStr, __instance.Name, __instance.IsHero, chara.IsMounted, chara.IsRanged, chara.Tier, chara.Culture.Name.ToString());
                        }
                        if (newbanner is Object)
						{
							//If newBanner exists we override clan Banner with It
							newOverrideBanner = new Banner(newbanner);
						}
						if (newshield is Object)
						{
							//If newBanner exists we override clan Banner with It
							//	Log.write("update item with new shield:" + newshield);
							newOverrideShield = new Banner(newshield);
						}

						if ( name.Equals("Campaign Banner Small") || name.Equals("Mod Banner 1") || name.Equals("Mod Banner 2") || weapon.IsBanner() )
						{
							//Update all items with shield code
							for (EquipmentIndex index = EquipmentIndex.WeaponItemBeginSlot; index < EquipmentIndex.NumAllWeaponSlots; ++index)
							{
								__instance.Equipment[index] = new MissionWeapon(__instance.Equipment[index].Item, __instance.Equipment[index].ItemModifier, newOverrideShield);
							}

							FieldInfo fi = typeof(MissionWeapon).GetField("<Banner>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance);
							TypedReference reference = __makeref(weapon);
							fi.SetValueDirect(reference, newOverrideBanner);

							String item = weapon.Item.ToString();

							//Update banner with banner code
							weapon = new MissionWeapon(MBObjectManager.Instance.GetObject<ItemObject>(item), (ItemModifier)null, newOverrideBanner);

							//Reset colors according to Banner
							if (c1 is object && c2 is object)
							{
								__instance.SetClothingColor1((uint)c1);
								__instance.SetClothingColor2((uint)c2);
							}
						}
						else if (weapon.IsShield())
						{

							//Update Shield
							FieldInfo fi = typeof(MissionWeapon).GetField("<Banner>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance);
							TypedReference reference = __makeref(weapon);
							fi.SetValueDirect(reference, newOverrideShield);

							//Update Banner
							for (EquipmentIndex index = EquipmentIndex.WeaponItemBeginSlot; index < EquipmentIndex.NumAllWeaponSlots; ++index)
							{
								//Edit banner for synchronization
								string itemName = __instance.Equipment[index].Item?.Name?.ToString();
								if ( itemName.Equals("Campaign Banner Small") || itemName.Equals("Mod Banner 1") || itemName.Equals("Mod Banner 2") || weapon.IsBanner() ) {
									String item = __instance.Equipment[index].Item.ToString();
									__instance.Equipment[index] = new MissionWeapon(MBObjectManager.Instance.GetObject<ItemObject>(item), (ItemModifier)null, newOverrideBanner);
									break;
								}
							}

							//Reset colors according to Shield
							if (c1 is object && c2 is object)
							{
								__instance.SetClothingColor1((uint)c1);
								__instance.SetClothingColor2((uint)c2);
							}
							//Locate Banner
						}
						__instance.EquipItemsFromSpawnEquipment(false);
					}
					savedColorData = null;

                }
				catch (Exception e)
				{
					Log.write("Error caught:" + e.Message);
				}
				return true;
			}
		}

        [HarmonyPatch(typeof(AgentVisuals), "AddSkinArmorWeaponMultiMeshesToEntity")]
		internal class PocColorModAgentVisualsAddMeshes
		{ 
            public static void Postfix(ref AgentVisuals __instance, uint teamColor1, uint teamColor2, bool needBatchedVersion)
			{
				try
				{
                    //Log.write("AgentVisuals AddSkinArmorWeaponMultiMeshesToEntity");

                    Thread thread = Thread.CurrentThread;
					AgentVisualsData data = (AgentVisualsData)Traverse.Create(__instance).Field("_data").GetValue();
					Banner banner = data.BannerData;
					string bannerStr = banner is object ? PocColorMod.SerializeBanner(banner) : null;

					//Log.write("AgentVisuals AddSkinArmorWeaponMultiMeshesToEntity: " + data.CharacterObjectStringIdData );
                    
                    if (bannerStr != null)
					{
                        //Log.write("There is Banner Data!!");

                        string clan = PocColorMod.bannerClanCache[bannerStr] ?? "";
						string kingdom = PocColorMod.bannerKingdomCache[bannerStr] ?? "";
						
						bool isClan(Clan c) { return c.Name.ToString() == clan; }
						Clan myclan = Clan.FindFirst(isClan);

						Banner newOverrideBanner = banner;
						if (myclan is Object)
						{
							newOverrideBanner = myclan.Banner;
						}
						// i can getConfig to fetch the corresponding banner and shields and see if i need to override
						String charName = __instance.GetCharacterObjectID();
                        CharacterObject chara = CharacterObject.FindFirst( c => c.Name.ToString().Equals(charName) );
                        
						bool isMounted = chara?.IsMounted ?? false;
						bool isRanged = chara?.IsRanged ?? false;
                        int tier = chara?.Tier ?? 0;
						string culture = chara?.Culture.Name.ToString() ?? "";
						bool isHero = chara?.IsHero ?? false;

                        (int mode, uint? c1, uint? c2, string newbanner, string newshield) = getColorFromConfig(clan, ref bannerStr, charName, isHero, isMounted, isRanged, tier, culture);

						//(string newbanner, string newshield) = getBannerFromConfig(bannerStr, __instance.GetCharacterObjectID(), true);
												
						if (newbanner is Object)
						{
							//If newBanner exists we override clan Banner with It
							newOverrideBanner = new Banner(newbanner);
						}
						int hashCode = data.BodyPropertiesData.GetHashCode();

						EquipmentElement equipmentElement;

                        for (int slotIndex = 0; slotIndex < 5; ++slotIndex)
						{
                            equipmentElement = data.EquipmentData[slotIndex];

                            if (!equipmentElement.IsEmpty)
							{
								ItemObject primaryItem = equipmentElement.Item;
                                //Log.write("primary item Name:" + primaryItem?.Name.ToString());

                                //Check Item Type
                                string name = primaryItem?.Name?.ToString() ?? "";
								equipmentElement = data.EquipmentData[slotIndex];
								ItemModifier itemModifier = equipmentElement.ItemModifier;

                                MissionWeapon missionWeapon;

                                if ( name.Equals("Campaign Banner Small") || name.Equals("Mod Banner 1") || name.Equals("Mod Banner 2") )
								{
									missionWeapon = new MissionWeapon(primaryItem, itemModifier, newOverrideBanner);

                                    //Log.write("Item Weapon:" + missionWeapon.GetType()?.Name + ", " + missionWeapon.ToString() + ", " + missionWeapon.Item.GetName());

                                }
                                else
								{
									//Shield
									missionWeapon = new MissionWeapon(primaryItem, itemModifier, banner);

                                    //Log.write("Item Weapon:" + missionWeapon.GetType()?.Name + ", " + missionWeapon.ToString() + ", " + missionWeapon.Item.GetName());

                                }
                                if (data.AddColorRandomnessData)
									missionWeapon.SetRandomGlossMultiplier(hashCode);
								WeaponData weaponData = missionWeapon.GetWeaponData(needBatchedVersion);
								WeaponData ammoWeaponData = missionWeapon.GetAmmoWeaponData(needBatchedVersion);
								data.AgentVisuals.AddWeaponToAgentEntity(slotIndex, in weaponData, missionWeapon.GetWeaponStatsData(), in ammoWeaponData, missionWeapon.GetAmmoWeaponStatsData(), data.GetCachedWeaponEntity((EquipmentIndex)slotIndex));
								weaponData.DeinitializeManagedPointers();
								ammoWeaponData.DeinitializeManagedPointers();
							}
						}

						//Reset colors according to Banner
						if (c1 is object && c2 is object)
						{
							data.ClothColor1((uint)c1);
							data.ClothColor2((uint)c2);
						}
						
                        data.AgentVisuals.SetWieldedWeaponIndices(data.RightWieldedItemIndexData, data.LeftWieldedItemIndexData);
					}
				}
				catch (Exception e)
				{
					Log.write("Error caught:" + e.Message);
				}
			}
		}

		[HarmonyPatch(typeof(AgentVisuals), "Create")]
		internal class PocColorModAgentVisualsCreate
		{
			public static bool Prefix(ref AgentVisualsData data, ref string name)
			{
				try
				{
                    Log.write("AgentVisuals Create:" + name);

					if (name.StartsWith("PartyIcon"))
					{
						string charname = name.Substring(10);
						data.CharacterObjectStringId(charname);
						Log.write("Party Banner: " + data.BannerData.ToString());

					}
                }
				catch (Exception e)
				{
					Log.write("Error caught:" + e.Message);
				}
				return true;
			}
		}

        [HarmonyPatch(typeof(BasicCharacterObject), "Race", MethodType.Setter)]
		internal class BasicCharacterObjectRace
        {
            public static void Postfix(ref BasicCharacterObject __instance)
            {
                try
                {
                    Log.write("BasicCharacterObject Name:" + __instance.Name);
                    Log.write("BasicCharacterObject Id" + __instance.Id);
                    Log.write("BasicCharacterObject Culture:" + __instance.Culture);
                    Log.write("BasicCharacterObject Age:" + __instance.Age);
                    Log.write("BasicCharacterObject Race:" + __instance.Race);
                }
                catch (Exception e)
                {
                    Log.write("Error caught:" + e.Message);
                }
            }
        }

        /********************************************************************
		 * 
		 *  Save the colors for later update
		 * 
		 ********************************************************************/
        [HarmonyPatch(typeof(CharacterTableau), "RefreshCharacterTableau")]
		internal class PocColorModCharacterTableauRefresh
		{
			public static bool Prefix(ref CharacterTableau __instance)
			{
                //GET COLOR CONFIG and store it in cache
                string stringId = (string)Traverse.Create(__instance).Field("_charStringId").GetValue();
				//Log.write("Id:" + stringId);
				CharacterObject chara;

				string charName = "";
				bool isHero = false;
                bool isMounted = false;
				bool isRanged = false;
				int tier = 0;
				string culture = "";

                if (stringId is object)
				{
				    chara = CharacterObject.Find(stringId);
					//Log.write("Name:" + chara.Name);

					charName = chara.Name.ToString();
					isHero = chara.IsHero;
					isMounted = chara.IsMounted;
					isRanged = chara.IsRanged;
					tier = chara.Tier;
					culture = chara.Culture.Name.ToString();
                }
                Banner bannerObj = (Banner)Traverse.Create(__instance).Field("_banner").GetValue();

                //ItemObject bannerItem = (ItemObject)Traverse.Create(__instance).Field("_bannerItem").GetValue();
                //Log.write("BannerItem:" + (bannerItem is object ? bannerItem.ToString() : "null") );

                (int mode, uint? c1, uint? c2, string newbanner, string newshield) = getColorFromConfig(null, ref bannerObj, charName, isHero, isMounted, isRanged, tier, culture);
				savedColorData = new ColorData(mode, c1, c2, newbanner, newshield);

                return true;
			}
        }

        /********************************************************************
		* 
		*  update the banner using saved colors
		* 
		********************************************************************/
        [HarmonyPatch(typeof(CharacterTableau), "UpdateBannerItem")]
        internal class PocColorModCharacterTableau
        {
            public static bool Prefix(ref CharacterTableau __instance, ref string __state)
            {
                try
                {
                   //Log.write("CharacterTableau UpdateBannerItem:");

                string stringId = (string)Traverse.Create(__instance).Field("_charStringId").GetValue();
				//Log.write("Id:" + stringId);

				CharacterObject chara = null;

                if (stringId is object)
				{
		               chara = CharacterObject.Find(stringId);
				}
                //Log.write("Name:" + chara.Name);

                Banner bannerObj = (Banner)Traverse.Create(__instance).Field("_banner").GetValue();

					//ItemObject bannerItem = (ItemObject)Traverse.Create(__instance).Field("_bannerItem").GetValue();
					//Log.write("BannerItem:" + (bannerItem is object ? bannerItem.ToString() : "null") );

					int mode;
					uint? c1;
					uint? c2;
					string newbanner;
					string newshield;

					if (savedColorData is object)
					{
						(mode, c1, c2, newbanner, newshield) = (savedColorData.mode, savedColorData.c1, savedColorData.c2, savedColorData.newbanner, savedColorData.newshield);

						//save shield value in state to restore it after banner has been updated
						__state = newshield;

						//set banner value
						__instance.SetBannerCode(newbanner);
						if (c1 is object)
						{
							__instance.SetArmorColor1(c1.Value);
						}
						if (c2 is object)
						{
							__instance.SetArmorColor2(c2.Value);
						}
						savedColorData = null;
                    }
                }
                catch (Exception e)
                {
                    Log.write("Error caught:" + e.Message);
                }
                return true;
            }

			public static void Postfix(ref CharacterTableau __instance, ref string __state)
			{
                //Restore the banner with the shield value
                __instance.SetBannerCode(__state);
            }
        }


        /********************************************************************
		* 
		*  save colors for mount harness override
		* 
		********************************************************************/
        [HarmonyPatch(typeof(CharacterSpawner), "SpawnMount")]
		internal class PocColorModMountSpawnMount
		{
			public static bool Prefix(ref CharacterSpawner __instance, CharacterCode characterCode, bool __state)
			{
                //Log.write("CharacterSpawner SpawnMount");

                __state = false;
				if (savedColorData is null)
				{
					savedColorData = new ColorData(0, characterCode.Color1, characterCode.Color2, null, null);
					__state = true;
				}
				return true;
			}

			public static void Postfix(ref CharacterSpawner __instance, bool __state)
			{
				if (__state)
				{
					savedColorData = null;
				}
            }
		}

        /********************************************************************
		* 
		*  override mount harness
		* 
		********************************************************************/
        [HarmonyPatch(typeof(MountVisualCreator), "AddMountMesh")]
		internal class PocColorModMountVisualCreatorAddMountMeshToEntity
        {
			public static bool Prefix(ref List<MetaMesh> __result, MBAgentVisuals agentVisual, ItemObject mountItem, ItemObject harnessItem, string mountCreationKeyStr, Agent agent = null)
			{
				try {

                    //Log.write("MountVisualCreator AddMountMesh");

                    List<MetaMesh> metaMeshList = new List<MetaMesh>();

                HorseComponent horseComponent = mountItem.HorseComponent;
                uint maxValue = uint.MaxValue;
                MetaMesh multiMesh = mountItem.GetMultiMesh(false, false, true);
                if (string.IsNullOrEmpty(mountCreationKeyStr))
                    mountCreationKeyStr = MountCreationKey.GetRandomMountKeyString(mountItem, MBRandom.RandomInt());
                MountCreationKey mountCreationKey = MountCreationKey.FromString(mountCreationKeyStr);
                if (mountItem.ItemType == ItemObject.ItemTypeEnum.Horse)
                    MountVisualCreator.SetHorseColors(multiMesh, mountCreationKey);
                if (horseComponent.HorseMaterialNames != null && horseComponent.HorseMaterialNames.Count > 0)
                    MountVisualCreator.SetMaterialProperties(mountItem, multiMesh, mountCreationKey, ref maxValue);
                int nondeterministicRandomInt = MBRandom.NondeterministicRandomInt;
                SetVoiceDefinition(agent, nondeterministicRandomInt);
                MetaMesh metaMesh = (MetaMesh)null;
				if (harnessItem != null)
				{
					metaMesh = harnessItem.GetMultiMesh(false, false, true);

                    if (harnessItem.IsUsingTeamColor)
                    {
                        for (int meshIndex = 0; meshIndex < metaMesh.MeshCount; ++meshIndex)
                        {
                            Mesh meshAtIndex = metaMesh.GetMeshAtIndex(meshIndex);
                            if (!meshAtIndex.HasTag("no_team_color"))
                            {
                                int mode;
                                uint? c1;
                                uint? c2;
                                string newbanner;
                                string newshield;

								if (savedColorData is object)
								{
                                    (mode, c1, c2, newbanner, newshield) = (savedColorData.mode, savedColorData.c1, savedColorData.c2, savedColorData.newbanner, savedColorData.newshield);

									if (c1 is object)
									{
                                        meshAtIndex.Color = (uint)c1;
                                    }
                                    if (c2 is object)
                                    {
                                        meshAtIndex.Color2 = (uint)c2;
                                    }
								}
                            }
                        }
                    }
                }

                foreach (KeyValuePair<string, bool> additionalMeshesName in horseComponent.AdditionalMeshesNameList)
                {
                    if (additionalMeshesName.Key.Length > 0)
                    {
                        string metaMeshName = additionalMeshesName.Key;
                        if (harnessItem == null || !additionalMeshesName.Value)
                        {
                            MetaMesh copy = MetaMesh.GetCopy(metaMeshName);
                            if (maxValue != uint.MaxValue)
                                copy.SetFactor1Linear(maxValue);
                            metaMeshList.Add(copy);
                        }
                        else
                        {
                            ArmorComponent armorComponent1 = harnessItem.ArmorComponent;
                            if ((armorComponent1 != null ? (armorComponent1.ManeCoverType != ArmorComponent.HorseHarnessCoverTypes.All ? 1 : 0) : 1) != 0)
                            {
                                ArmorComponent armorComponent2 = harnessItem.ArmorComponent;
                                if ((armorComponent2 != null ? (armorComponent2.ManeCoverType > ArmorComponent.HorseHarnessCoverTypes.None ? 1 : 0) : 0) != 0)
                                    metaMeshName = metaMeshName + "_" + (object)harnessItem?.ArmorComponent?.ManeCoverType;
                                MetaMesh copy = MetaMesh.GetCopy(metaMeshName);
                                if (maxValue != uint.MaxValue)
                                    copy.SetFactor1Linear(maxValue);
                                metaMeshList.Add(copy);
                            }
                        }
                    }
                }
                if ((NativeObject)multiMesh != (NativeObject)null)
                    metaMeshList.Add(multiMesh);
                if ((NativeObject)metaMesh != (NativeObject)null)
                {
                    if ((NativeObject)agentVisual != (NativeObject)null)
                    {
                        MetaMesh ropeMesh = (MetaMesh)null;
                        if (NativeConfig.CharacterDetail > 2 && harnessItem.ArmorComponent != null)
                            ropeMesh = MetaMesh.GetCopy(harnessItem.ArmorComponent.ReinsRopeMesh, false, true);
                        MetaMesh copy = MetaMesh.GetCopy(harnessItem.ArmorComponent?.ReinsMesh, false, true);
                        if ((NativeObject)ropeMesh != (NativeObject)null && (NativeObject)copy != (NativeObject)null)
                        {
                            agentVisual.AddHorseReinsClothMesh(copy, ropeMesh);
                            ropeMesh.ManualInvalidate();
                        }
                        if ((NativeObject)copy != (NativeObject)null)
                            metaMeshList.Add(copy);
                    }
                    else if (harnessItem.ArmorComponent != null)
                    {
                        MetaMesh copy = MetaMesh.GetCopy(harnessItem.ArmorComponent.ReinsMesh, mayReturnNull: true);
                        if ((NativeObject)copy != (NativeObject)null)
                            metaMeshList.Add(copy);
                    }
                    metaMeshList.Add(metaMesh);
                }
                __result =  metaMeshList;

                }
                catch (Exception e)
                {
                    Log.write(e.Message);
					return true;
                }
                return false;
            }

            private static void SetVoiceDefinition(Agent agent, int seedForRandomVoiceTypeAndPitch)
            {
				try { 
                MBAgentVisuals agentVisuals = agent?.AgentVisuals;
                if (!((NativeObject)agentVisuals != (NativeObject)null))
                    return;
                string collisionInfoClassName = agent.GetSoundAndCollisionInfoClassName();
                int length = !string.IsNullOrEmpty(collisionInfoClassName) ? SkinVoiceManager.GetVoiceDefinitionCountWithMonsterSoundAndCollisionInfoClassName(collisionInfoClassName) : 0;
                if (length == 0)
                {
                    agentVisuals.SetVoiceDefinitionIndex(-1, 0.0f);
                }
                else
                {
                    int num = MathF.Abs(seedForRandomVoiceTypeAndPitch);
                    float voicePitch = (float)num * 4.656613E-10f;
                    int[] definitionIndices = new int[length];
                    SkinVoiceManager.GetVoiceDefinitionListWithMonsterSoundAndCollisionInfoClassName(collisionInfoClassName, definitionIndices);
                    int voiceDefinitionIndex = definitionIndices[num % length];
                    agentVisuals.SetVoiceDefinitionIndex(voiceDefinitionIndex, voicePitch);
                }
                }
                catch (Exception e)
                {
                    Log.write(e.Message);
                }
            }
        }

        [HarmonyPatch(typeof(PartyVisual), "AddCharacterToPartyIcon")]
		internal class PocColorModPartyVisual
		{
			public static bool Prefix(PartyVisual __instance, CharacterObject characterObject, ref string bannerKey, ref uint teamColor1, ref uint teamColor2)
			{
				try
				{
                    Log.write("PartyVisual AddCharacterToPartyIcon");

                    //There is a serialize in code that mess bannerKey: so we reset it correctly
                    Banner banner = characterObject?.HeroObject?.ClanBanner;
					if (banner is object)
					{
						bannerKey = PocColorMod.SerializeBanner(banner);
						string charName = characterObject?.Name.ToString();
						updateCache(bannerKey, charName);

                        Log.write("PartyVisual AddCharacterToPartyIcon:" + charName);
                        Log.write("AddCharacterToPartyIcon, char: " + characterObject.Name.ToString() + ", mounted:" + characterObject.IsMounted + ", ranged:" + characterObject.IsRanged + " , tier: " + characterObject.Tier + " , culture:" + characterObject.Culture.Name.ToString());

                        (int mode, uint? c1, uint? c2, string newbanner, string newshield) = getColorFromConfig(null, ref bannerKey, charName, characterObject.IsHero, characterObject.IsMounted, characterObject.IsRanged, characterObject.Tier, characterObject.Culture.Name.ToString());

						if (newshield is object)
						{
							bannerKey = newshield;
						}
						else if (newbanner is object)
						{
							bannerKey = newbanner;
						}

						if (c1 is object && c2 is object)
						{
							teamColor1 = c1.Value;
							teamColor2 = c2.Value;
						}
					}
				}
				catch (Exception e)
				{
					Log.write("Error caught:" + e.Message);
				}
				return true;
			}
		}

		[HarmonyPatch(typeof(PartyNameplateVM), "PartyBanner", MethodType.Setter )]
		internal class PocColorModPartyBanner
		{
			public static bool Prefix(ref PartyNameplateVM __instance, ref ImageIdentifierVM value )
			{
				//Log.write("update Party Banner:");
				try { 

				if (__instance.Party.LeaderHero is object ) {

					string clan = __instance.Party.ActualClan.Name.ToString();

                    string bannerKey = PocColorMod.SerializeBanner(__instance.Party.LeaderHero?.ClanBanner);
					string charName = __instance.Party.LeaderHero.Name.ToString();

					CharacterObject chara = __instance.Party.LeaderHero.CharacterObject;
                    //Log.write("PartyBanner, char: " + charName + ", mounted:" + chara.IsMounted + ", ranged:" + chara.IsRanged + " , tier: " + chara.Tier + " , culture:" + chara.Culture.Name.ToString());

                    string newshield = getIconFromConfig(clan, ref bannerKey, charName, true, chara.IsMounted, chara.IsRanged, chara.Tier, chara.Culture.Name.ToString());
					value = new ImageIdentifierVM(BannerCode.CreateFrom(newshield), true);
				}
                }
                catch (Exception e)
                {
                    Log.write(e.Message);
                }
                return true;
			}
		}

		[HarmonyPatch(typeof(Clan), "UpdateBannerColorsAccordingToKingdom")]
		internal class PocColorModOverrideBanner
		{
			public static bool Prefix(ref Clan __instance, ref string __state)
			{
				try
				{
					//Log.write("Clan UpdateBannerColorsAccordingToKingdom PRE");

                    if (PocColorMod.config is null)
					{
						return true;
					}

					__state = PocColorMod.SerializeBanner(__instance.Banner);
				}
				catch (Exception e)
				{
					Log.write("Error caught:" + e.Message);
				}
				return true;
			}

			public static void Postfix(ref Clan __instance, string __state)
			{

				try
				{
                    //Log.write("Clan UpdateBannerColorsAccordingToKingdom POST");

                    if (PocColorMod.config is null)
					{	
						return;
					}
					//Log.write("------------- update clan banner colors START -----------");
					//Log.write("- kingdom colors were applied to banner (depending on config they will be reset)");
					//Log.write("---- Clan is: " + __instance.Name.ToString() );
					//This function will restore the correct banner and/or colors if follow colors is false

					Kingdom kingdom = __instance.Kingdom;

					string playerClanName = Clan.PlayerClan?.Name?.ToString();
					string playerKingdomName = Clan.PlayerClan?.Kingdom?.Name?.ToString();

					bool isPlayerClan = (!string.IsNullOrEmpty(playerClanName) && __instance.Name?.ToString() == playerClanName);
					bool isPlayerKingdom = !string.IsNullOrEmpty(playerKingdomName) && kingdom?.Name?.ToString() == playerKingdomName && Clan.PlayerClan.IsKingdomFaction;

					(bool follow, bool followBG, string clanBanner, string clanShield, string primary, string secondary) = PocColorMod.config.GetClanConfig(kingdom?.Name?.ToString(), __instance.Name?.ToString(), isPlayerKingdom, isPlayerClan);

					//Log.write("follow: [" + follow + "]");
					//Log.write("clanBanner: [" + clanBanner + "]");
					//Log.write("primary: [" + primary + "]");
					//Log.write("secondary: [" + secondary + "]");

					uint color1 = __instance.Color;
					uint color2 = __instance.Color2;

					//Log.write("- clan color1: ["+ BannerManager.GetColorId(color1) +"]");
					//Log.write("- clan color2: ["+ BannerManager.GetColorId(color2) + "]");

					if (primary is object)
					{
						color1 = PocColorModSetColors.parseColor(primary);
						//Log.write("- clan color1 overriden with primaryColor config: [" + color1 + "]");
					}

					if (secondary is object)
					{
						color2 = PocColorModSetColors.parseColor(secondary);
						//Log.write("- clan color2 overriden with secondaryColor config: [" + color2 + "]");
					}

					if (!follow && !followBG && clanBanner is null)
					{
						//Log.write("- follow is false and banner is not set: reset banner to prior value");
						//reset clan color to the banner
						//Log.write("clanBanner: [" + __state + "]");
						Traverse.Create(__instance).Field("_banner").SetValue(new Banner(__state));
					}

					if (!follow && !followBG && clanBanner is object)
					{
						//Log.write("- follow is false and banner is set: setting clan banner to config clanBanner");

						//reset clanBanner
						Banner banner = new Banner(clanBanner);
						Traverse.Create(__instance).Field("_banner").SetValue(banner);
					
						if (primary is object)
						{
							//Apply color if set
							//Log.write("- config primaryColor is defined: updating banner primary color");
							__instance.Banner?.ChangePrimaryColor(color1);
						}
						if (secondary is object)
						{
							//Apply color if set
							//Log.write("- config secondaryColor is defined: updating banner icons colors");
							__instance.Banner?.ChangeIconColors(color2);
						}
					}

					if ( (follow || followBG) && clanBanner is object)
					{
						//reset clanBanner
						Banner banner = new Banner(clanBanner);
						Traverse.Create(__instance).Field("_banner").SetValue(banner);

						//Log.write("- follow is true and banner is set: resetting banner colors back to kingdom colors");
						//reset clan color to the banner
						__instance.Banner?.ChangePrimaryColor(kingdom.PrimaryBannerColor);
						if (!followBG) __instance.Banner?.ChangeIconColors(kingdom.SecondaryBannerColor);
					}
					
				if (__instance.Banner is object && PocColorMod.bannerClanCache is object)
				{
					//Update clan Banner in cache after update
					String bannerStr = PocColorMod.SerializeBanner(__instance.Banner);
					PocColorMod.bannerClanCache.TryAdd(bannerStr, __instance?.Name.ToString());
					if (kingdom is object)
					{
						PocColorMod.bannerKingdomCache.TryAdd(bannerStr, kingdom?.Name.ToString());
					}
				}
				//Log.write("> updated Clan banner:" + PocColorMod.SerializeBanner(__instance.Banner));
				//Log.write("------------- update clan banner colors END  -----------");
					
			}
			catch (Exception e)
				{
					Log.write("Error caught:" + e.Message);
				}
			}
		}
		

		[HarmonyPatch(typeof(BannerEditorVM), "SetClanRelatedRules")]
		internal class BannerEditorVMSetClanRules
		{
			private static bool Prefix(BannerEditorVM __instance, ref bool canChangeBackgroundColor)
			{
					canChangeBackgroundColor = true;
					return true;
			}
		}

		[HarmonyPatch(typeof(GauntletBannerEditorScreen), "OnDone")]
		internal class BannerEditorGauntletScreen_OnDone
		{
			private static void Postfix(ref GauntletBannerEditorScreen __instance)
			{
				try
				{

					Clan playerClan = Traverse.Create((object)__instance).Field<Clan>("_clan").Value;

					Kingdom kingdom = playerClan.Kingdom;

					string playerClanName = Clan.PlayerClan?.Name?.ToString();
					string playerKingdomName = Clan.PlayerClan?.Kingdom?.Name?.ToString();

					bool isPlayerClan = (!string.IsNullOrEmpty(playerClanName) && playerClan.Name?.ToString() == playerClanName);
					bool isPlayerKingdom = !string.IsNullOrEmpty(playerKingdomName) && kingdom?.Name?.ToString() == playerKingdomName && Clan.PlayerClan.IsKingdomFaction;

					(bool follow, bool followBG, string clanBanner, string clanShield, string primary, string secondary) = PocColorMod.config.GetClanConfig(kingdom?.Name?.ToString(), playerClan.Name?.ToString(), isPlayerKingdom, isPlayerClan);
					//Log.write("> clan: [" + playerClan.Name?.ToString() + "] follow: " + follow + ", primary: " + primary + ", secondary:" + secondary + ", clanbanner:" + clanBanner );

					uint color1 = playerClan.Color;
					uint color2 = playerClan.Color2;

					//Log.write("- clan color1: ["+ color1 +"]");
					//Log.write("- clan color2: ["+ color2 + "]");

					if (clanBanner is object)
					{
						//override clanBanner if set
						Banner banner = new Banner(clanBanner);
						Traverse.Create(playerClan).Field("_banner").SetValue(banner);
					}

					if (primary is object)
					{
						//override primary
						color1 = PocColorModSetColors.parseColor(primary);
						playerClan.Banner?.ChangePrimaryColor(color1);
						//Log.write("- clan color1 overriden with primaryColor config: [" + color1 + "]");
					}
					if (secondary is object)
					{
						//override secondary
						color2 = PocColorModSetColors.parseColor(secondary);
						playerClan.Banner?.ChangeIconColors(color2);
						//Log.write("- clan color2 overriden with secondaryColor config: [" + color2 + "]");
					}
				}
				catch (Exception ex)
				{
					Log.write("Error while applying colors: " + ex.Message);
				}
			}
		}


		[HarmonyPatch(typeof(Banner), "Serialize")]
		internal class PocColorModFixBannerSerialize
		{
			public static bool Prefix(ref Banner __instance, ref string __result)
			{
				try
				{
                    //Log.write("Banner Serialize");
                    //Fix the serialization that mess with bannerText Code
                    __result = PocColorMod.SerializeBanner(__instance);

                    //Log.write("Banner Serialize: DONE");
                    return false;
				}
				catch (Exception ex)
				{
					Log.write("Error caught while Serializing banner:" + ex.Message);
				}
				return true;
			}
		}


		[HarmonyPatch(typeof(Clan), "Banner", MethodType.Getter)]
		internal class PocColorModclanBanner
		{ 
			public static void Postfix(ref Clan __instance, ref Banner __result)
			{
				try
				{

                    //Log.write("Clan Banner Getter");

                    //Fix the serialization that mess with bannerText Code
                    __result = (Banner)Traverse.Create(__instance).Field("_banner").GetValue();
                }
                catch (Exception ex)
				{
					Log.write("Error caught:" + ex.Message);
				}
			}
		}


	}
}